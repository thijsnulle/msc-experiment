{"selected_lines": [35, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011879920959472656, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].map(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 32, 37, 34, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to float\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0027840137481689453, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 32, 35, 31, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 36, 34, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 4, \"A-\": 3, \"B+\": 2, \"B\": 2, \"B-\": 1, \"C+\": 0, \"C\": 0, \"C-\": -1, \"D+\": -2, \"D\": -2, \"D-\": -3})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'], errors='coerce')\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011347293853759766, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 35, 33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01768016815185547, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 33, 36, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 37, 35, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 4, 'A+': 4.5, 'B': 3, 'B+': 3.5, 'C': 2, 'C+': 2.5, 'D': 1, 'D+': 1.5})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 31, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode_grades)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 32, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.015272855758666992, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.015272855758666992, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 33, 37, 32, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'],\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 4, 'A+': 4.5, 'B': 3, 'B+': 3.5, 'C': 2, 'C+': 2.5, 'D': 1, 'D+': 1.5})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011347293853759766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011879920959472656, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert string scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011429309844970703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 36, 35, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 37, 31, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: ord(x) - ord(\"A\") + 1)  # Encodes grades into numerical values\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode_grades)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 37, 36, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.factorize(df[\"Grade\"])[1]\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': list(map(float, data['Score_String'])),\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Converts scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 31, 36, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].map(lambda x: float(x))  # Convert scores to float\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011708974838256836, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return correlation", "compilation_passed": true, "time": 0.00225830078125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 37, 31, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 32, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 32, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002161741256713867, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.019970178604125977, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [31, 37, 32, 34, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].map(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: {\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': list(map(float, data['Score_String'])),\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 33, 31, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002151966094970703, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 9, \"A\": 8, \"A-\": 7, \"B+\": 6, \"B\": 5, \"B-\": 4, \"C+\": 3, \"C\": 2, \"C-\": 1,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0022149085998535156, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode_grades)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 32, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"], categories=[\"A\", \"B\", \"C\", \"D\", \"F\"], ordered=False).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0017690658569335938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode_grades)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 37, 35, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0021238327026367188, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011219978332519531, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 37, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 10, \"A\": 9, \"A-\": 8, \"B+\": 7, \"B\": 6, \"B-\": 5, \"C+\": 4, \"C\": 3, \"C-\": 2, \"D+\": 1})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 37, 31, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.008874893188476562, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 32, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.factorize(df[\"Grade\"])[1]\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 34, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode_grades)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 31, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 9, \"A\": 8, \"A-\": 7, \"B+\": 6, \"B\": 5, \"B-\": 4, \"C+\": 3, \"C\": 2, \"C-\": 1,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 32, 36, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002131223678588867, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 36, 31, 33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A+': 3, 'A': 2, 'A-': 1, 'B+': 4, 'B': 3, 'B-': 2, 'C+': 5, 'C': 4, 'C-': 3, 'D+': 6, 'D': 5, 'D-': 4, 'E': 1, 'F': 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.011482000350952148, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 32, 36, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002131223678588867, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 35, 33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 4, \"A-\": 3, \"B+\": 2, \"B\": 2, \"B-\": 1, \"C+\": 0, \"C\": 0, \"C-\": -1, \"D+\": -2, \"D\": -2, \"D-\": -3})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 37, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"A-\": 2, \"B+\": 1, \"B\": 0, \"B-\": -1, \"C+\": -2, \"C\": -3, \"C-\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 31, 34, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'],\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 36, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 33, 31, 35, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 35, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 10, \"A\": 9, \"A-\": 8, \"B+\": 7, \"B\": 6, \"B-\": 5, \"C+\": 4, \"C\": 3, \"C-\": 2, \"D+\": 1})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.002142190933227539, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011708974838256836, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0020668506622314453, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 31, 34, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores from string to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 37, 36, 31, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': map(float, data['Score_String']), 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].map(lambda x: float(x))  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4.0, \"A\": 4.0, \"A-\": 3.7, \"B+\": 3.3, \"B\": 3.0,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6, 'D': 7, 'D+': 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011708974838256836, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 37, 31, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({\n    if len(df) < 2:\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 35, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 4, 'A+': 4.5, 'B': 3, 'B+': 3.5, 'C': 2, 'C+': 2.5, 'D': 1, 'D+': 1.5})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011433839797973633, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Converts scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 31, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = pd.factorize(df[\"Grade\"])[1]\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.002207040786743164, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 33, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0022470951080322266, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.00150299072265625, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011219978332519531, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002189159393310547, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"A-\": 2, \"B+\": 1, \"B\": 0, \"B-\": -1, \"C+\": -2, \"C\": -3, \"C-\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 36, 37, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002089977264404297, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 31, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002151966094970703, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4.0, \"A\": 4.0, \"A-\": 3.7, \"B+\": 3.3, \"B\": 3.0,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": false, "time": 0.0003809928894042969, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.00220489501953125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 31, 37, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': map(float, data['Score_String']), 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert string scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0021071434020996094, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 33, 32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].map(lambda x: float(x))  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 37, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.NaN\n    df[\"Score_Float\"] = df.apply(lambda x: float(x[\"Score_String\"]), axis=1)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 36, 32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float('nan')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0020499229431152344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 4, 'A+': 4.5, 'B': 3, 'B+': 3.5, 'C': 2, 'C+': 2.5, 'D': 1, 'D+': 1.5})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 34, 36, 35, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 32, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 37, 35, 31, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 10, \"A\": 9, \"A-\": 8, \"B+\": 7, \"B\": 6, \"B-\": 5, \"C+\": 4, \"C\": 3, \"C-\": 2, \"D+\": 1})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 35, 37, 32, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'], errors='coerce')\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 10, \"A\": 9, \"A-\": 8, \"B+\": 7, \"B\": 6, \"B-\": 5, \"C+\": 4, \"C\": 3, \"C-\": 2, \"D+\": 1})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 36, 37, 34, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 4, \"A-\": 3, \"B+\": 2, \"B\": 2, \"B-\": 1, \"C+\": 0, \"C\": 0, \"C-\": -1, \"D+\": -2, \"D\": -2, \"D-\": -3})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A+': 3, 'A': 2, 'A-': 1, 'B+': 4, 'B': 3, 'B-': 2, 'C+': 5, 'C': 4, 'C-': 3, 'D+': 6, 'D': 5, 'D-': 4, 'E': 1, 'F': 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.018819808959960938, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [31, 35, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores from string to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: {\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'],\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 36, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6, 'D': 7, 'D+': 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 33, 31, 37, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Converts scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6, 'D': 7, 'D+': 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.011482000350952148, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4.0, \"A\": 4.0, \"A-\": 3.7, \"B+\": 3.3, \"B\": 3.0,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 31, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 33, 34, 32, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode_grades)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 36, 32, 37, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 33, 31, 37, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'],\n    if len(df) < 2:\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 4, 'A+': 4.5, 'B': 3, 'B+': 3.5, 'C': 2, 'C+': 2.5, 'D': 1, 'D+': 1.5})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 31, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A+': 3, 'A': 2, 'A-': 1, 'B+': 4, 'B': 3, 'B-': 2, 'C+': 5, 'C': 4, 'C-': 3, 'D+': 6, 'D': 5, 'D-': 4, 'E': 1, 'F': 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011708974838256836, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': map(float, data['Score_String']), 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 36, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'], errors='coerce')\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 4, 'A+': 4.5, 'B': 3, 'B+': 3.5, 'C': 2, 'C+': 2.5, 'D': 1, 'D+': 1.5})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 35, 33, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.NaN\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"], categories=[\"A\", \"B\", \"C\", \"D\", \"F\"], ordered=False).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0017409324645996094, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df.apply(lambda x: float(x[\"Score_String\"]), axis=1)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 36, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return np.NaN\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 34, 36, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 32, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 33, 37, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': map(float, data['Score_String']), 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].map(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 36, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": false, "time": 0.0005099773406982422, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [35, 37, 31, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: ord(x) - ord(\"A\") + 1)  # Encodes grades into numerical values\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 35, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"A-\": 2, \"B+\": 1, \"B\": 0, \"B-\": -1, \"C+\": -2, \"C\": -3, \"C-\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 31, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 37, 31, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': map(float, data['Score_String']), 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: {\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].map(lambda x: float(x))  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 10, \"A\": 9, \"A-\": 8, \"B+\": 7, \"B\": 6, \"B-\": 5, \"C+\": 4, \"C\": 3, \"C-\": 2, \"D+\": 1})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.00626373291015625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 36, 35, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011708974838256836, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 32, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002290010452270508, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 31, 32, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 36, 33, 31, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 36, 32, 31, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.00626373291015625, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 36, 35, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.001993894577026367, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 31, 32, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode_grades)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.005743980407714844, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 32, 31, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0019829273223876953, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 34, 33, 37, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: {\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.002053976058959961, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32, 36, 37, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('nan')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002141237258911133, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0020668506622314453, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.001953125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011347293853759766, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011433839797973633, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 34, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float('nan')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0020699501037597656, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 35, 32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 36, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert string scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0021169185638427734, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011347293853759766, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 31, 34, 33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011879920959472656, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 4, 'A+': 4.5, 'B': 3, 'B+': 3.5, 'C': 2, 'C+': 2.5, 'D': 1, 'D+': 1.5})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"B+\": 2, \"B\": 1, \"C+\": 0, \"C\": -1, \"D+\": -2, \"D\": -3, \"F\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.020899057388305664, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [34, 37, 33, 35, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 32, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 31, 36, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df.apply(lambda x: float(x[\"Score_String\"]), axis=1)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0023391246795654297, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 31, 32, 33, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert string scores to floats\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"], categories=[\"A\", \"B\", \"C\", \"D\", \"F\"], ordered=False).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 35, 34, 36, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: ord(x) - ord(\"A\") + 1)  # Encodes grades into numerical values\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.021286964416503906, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 32, 34, 37, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if df.shape[0] < 2:\n        return np.NaN\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"B+\": 2, \"B\": 1, \"C+\": 0, \"C\": -1, \"D+\": -2, \"D\": -3, \"F\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0021719932556152344, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 32, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 35, 36, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.NaN\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 37, 35, 33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: {\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002151966094970703, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 36, 34, 32, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 36, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert string scores to floats\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011879920959472656, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 31, 32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Converts scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 32, 35, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 9, \"A\": 8, \"A-\": 7, \"B+\": 6, \"B\": 5, \"B-\": 4, \"C+\": 3, \"C\": 2, \"C-\": 1,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].map(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 37, 32, 36, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 36, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df['Score_String'].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002187967300415039, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 33, 31, 34, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 33, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002063274383544922, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4.0, \"A\": 4.0, \"A-\": 3.7, \"B+\": 3.3, \"B\": 3.0,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 36, 32, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0021169185638427734, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 37, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0022759437561035156, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [31, 35, 34, 32, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"], categories=[\"A\", \"B\", \"C\", \"D\", \"F\"], ordered=False).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 31, 34, 33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.NaN\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 32, 35, 31, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.011482000350952148, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0020160675048828125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011347293853759766, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011347293853759766, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 33, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002063274383544922, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].map(lambda x: float(x))  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.002207040786743164, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 37, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'])  # Convert scores to numeric\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 4, \"A-\": 3, \"B+\": 2, \"B\": 2, \"B-\": 1, \"C+\": 0, \"C\": 0, \"C-\": -1, \"D+\": -2, \"D\": -2, \"D-\": -3})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 33, 35, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.NaN\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: {\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 37, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df.index) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].map(lambda x: float(x))  # Convert scores to float\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0019750595092773438, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 37, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores from string to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores to floats\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0020661354064941406, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 31, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'],\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01768016815185547, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 35, 31, 37, 32, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Converts scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 4, \"A-\": 3, \"B+\": 2, \"B\": 2, \"B-\": 1, \"C+\": 0, \"C\": 0, \"C-\": -1, \"D+\": -2, \"D\": -2, \"D-\": -3})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 32, 36, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 9, \"A\": 8, \"A-\": 7, \"B+\": 6, \"B\": 5, \"B-\": 4, \"C+\": 3, \"C\": 2, \"C-\": 1,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 36, 34, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: ord(x) - ord(\"A\") + 1)  # Encodes grades into numerical values\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 36, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4.0, \"A\": 4.0, \"A-\": 3.7, \"B+\": 3.3, \"B\": 3.0,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 35, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': list(map(float, data['Score_String'])),\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: {\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 32, 37, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].map(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0020639896392822266, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df.index) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0020689964294433594, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 37, 35, 36, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011879920959472656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 31, 36, 37, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert string scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 31, 33, 34, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: {\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 31, 37, 32, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 37, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0020809173583984375, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: {\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 37, 33, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 33, 34, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].map(lambda x: float(x))  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode_grades)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.012866973876953125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 32, 31, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.00220489501953125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 36, 37, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': list(map(float, data['Score_String'])),\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011569976806640625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 35, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"A-\": 2, \"B+\": 1, \"B\": 0, \"B-\": -1, \"C+\": -2, \"C\": -3, \"C-\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 31, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A+': 3, 'A': 2, 'A-': 1, 'B+': 4, 'B': 3, 'B-': 2, 'C+': 5, 'C': 4, 'C-': 3, 'D+': 6, 'D': 5, 'D-': 4, 'E': 1, 'F': 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.008874893188476562, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 4, 'A+': 4.5, 'B': 3, 'B+': 3.5, 'C': 2, 'C+': 2.5, 'D': 1, 'D+': 1.5})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011879920959472656, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0024192333221435547, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return correlation", "compilation_passed": true, "time": 0.0019979476928710938, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 33, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 36, 35, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"A-\": 2, \"B+\": 1, \"B\": 0, \"B-\": -1, \"C+\": -2, \"C\": -3, \"C-\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 36, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.012866973876953125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 37, 32, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'],\n    if len(df) < 2:\n        return float(\"nan\")\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].map(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002090930938720703, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"A-\": 2, \"B+\": 1, \"B\": 0, \"B-\": -1, \"C+\": -2, \"C\": -3, \"C-\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 34, 36, 32, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 35, 31, 33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6, 'D': 7, 'D+': 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 33, 35, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('nan')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0021440982818603516, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 32, 31, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores from string to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 36, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 34, 37, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 32, 34, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 37, 33, 32, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011879920959472656, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.008874893188476562, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011219978332519531, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: {\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002162933349609375, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011219978332519531, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 33, 36, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.NaN\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 32, 33, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 37, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'],\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.factorize(df[\"Grade\"])[1]\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.019970178604125977, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [34, 32, 36, 35, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: {\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 33, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.002201080322265625, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.008874893188476562, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: ord(x) - ord(\"A\") + 1)  # Encodes grades into numerical values\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 32, 36, 37, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011708974838256836, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 31, 32, 37, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df.index) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 33, 35, 31, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'], errors='coerce')\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 10, \"A\": 9, \"A-\": 8, \"B+\": 7, \"B\": 6, \"B-\": 5, \"C+\": 4, \"C\": 3, \"C-\": 2, \"D+\": 1})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].map(lambda x: float(x))  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002093076705932617, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.002207040786743164, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 31, 32, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0020668506622314453, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 31, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 34, 32, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': list(map(float, data['Score_String'])),\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 35, 31, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 34, 37, 36, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0019600391387939453, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011555194854736328, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 33, 37, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Converts scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 34, 31, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float('nan')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0022079944610595703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 35, 36, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0060842037200927734, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 31, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.011482000350952148, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 35, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 10, \"A\": 9, \"A-\": 8, \"B+\": 7, \"B\": 6, \"B-\": 5, \"C+\": 4, \"C\": 3, \"C-\": 2, \"D+\": 1})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 35, 37, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 10, \"A\": 9, \"A-\": 8, \"B+\": 7, \"B\": 6, \"B-\": 5, \"C+\": 4, \"C\": 3, \"C-\": 2, \"D+\": 1})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 31, 34, 32, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002154827117919922, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 34, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6, 'D': 7, 'D+': 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 37, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 32, 37, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 36, 32, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode_grades)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'], errors='coerce')\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.007663249969482422, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df.index) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 31, 33, 32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({\n    if len(df.index) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Converts scores from string format to floats\n    df[\"Grade_Encoded\"] = pd.factorize(df[\"Grade\"])[1]\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 34, 32, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores from string to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 33, 34, 35, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({\n    if len(df) < 2:\n        return float(\"nan\")\n    df[\"Score_Float\"] = df.apply(lambda x: float(x[\"Score_String\"]), axis=1)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 9, \"A\": 8, \"A-\": 7, \"B+\": 6, \"B\": 5, \"B-\": 4, \"C+\": 3, \"C\": 2, \"C-\": 1,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 37, 32, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011433839797973633, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 32, 35, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: {\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0059659481048583984, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0020508766174316406, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df['Score_String'].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: {\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 35, 34, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'], errors='coerce')\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 10, \"A\": 9, \"A-\": 8, \"B+\": 7, \"B\": 6, \"B-\": 5, \"C+\": 4, \"C\": 3, \"C-\": 2, \"D+\": 1})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 37, 35, 32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('nan')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 35, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].map(lambda x: float(x))  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 37, 34, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011708974838256836, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 34, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33, 31, 34, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 35, 36, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'],\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 36, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': map(float, data['Score_String']), 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode_grades)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 32, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.011482000350952148, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 32, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: ord(x) - ord(\"A\") + 1)  # Encodes grades into numerical values\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 34, 36, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.00214385986328125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 33, 31, 32, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6, 'D': 7, 'D+': 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.012866973876953125, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 36, 35, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 37, 31, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('nan')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0021789073944091797, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 37, 34, 33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.NaN\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [37, 32, 33, 31, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': list(map(float, data['Score_String'])),\n    if len(df) < 2:\n        return float(\"nan\")\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 36, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0019979476928710938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 36, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 10, \"A\": 9, \"A-\": 8, \"B+\": 7, \"B\": 6, \"B-\": 5, \"C+\": 4, \"C\": 3, \"C-\": 2, \"D+\": 1})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 32, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert string scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0021538734436035156, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0021479129791259766, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 33, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 31, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': list(map(float, data['Score_String'])),\n    if len(df.index) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0021810531616210938, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return correlation", "compilation_passed": true, "time": 0.001953125, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 36, 37, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011555194854736328, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert string scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0019941329956054688, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 34, 37, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': list(map(float, data['Score_String'])),\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 37, 33, 34, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'],\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 31, 37, 33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode_grades)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 33, 36, 31, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"], categories=[\"A\", \"B\", \"C\", \"D\", \"F\"], ordered=False).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 35, 37, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'], errors='coerce')\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: ord(x) - ord(\"A\") + 1)  # Encodes grades into numerical values\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0020780563354492188, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 37, 36, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'],\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 4, 'A+': 4.5, 'B': 3, 'B+': 3.5, 'C': 2, 'C+': 2.5, 'D': 1, 'D+': 1.5})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 37, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df['Score_String'].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0022478103637695312, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011433839797973633, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df.apply(lambda x: float(x[\"Score_String\"]), axis=1)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.010077238082885742, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 36, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A+': 3, 'A': 2, 'A-': 1, 'B+': 4, 'B': 3, 'B-': 2, 'C+': 5, 'C': 4, 'C-': 3, 'D+': 6, 'D': 5, 'D-': 4, 'E': 1, 'F': 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': list(map(float, data['Score_String'])),\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": false, "time": 0.00013494491577148438, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011347293853759766, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].map(lambda x: float(x))  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.002132415771484375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 37, 35, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 35, 36, 34, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0019431114196777344, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 35, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': map(float, data['Score_String']), 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 31, 32, 37, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df.apply(lambda x: float(x[\"Score_String\"]), axis=1)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 34, 31, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 32, 37, 34, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011708974838256836, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 34, 33, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 36, 32, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"B+\": 2, \"B\": 1, \"C+\": 0, \"C\": -1, \"D+\": -2, \"D\": -3, \"F\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0021066665649414062, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011708974838256836, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 37, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0022008419036865234, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 33, 31, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 34, 32, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0021271705627441406, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 33, 35, 37, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A+': 3, 'A': 2, 'A-': 1, 'B+': 4, 'B': 3, 'B-': 2, 'C+': 5, 'C': 4, 'C-': 3, 'D+': 6, 'D': 5, 'D-': 4, 'E': 1, 'F': 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 31, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].map(lambda x: float(x))  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0021009445190429688, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 36, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert string scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011219978332519531, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 37, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"], categories=[\"A\", \"B\", \"C\", \"D\", \"F\"], ordered=False).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.001688241958618164, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 36, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": false, "time": 0.0004661083221435547, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 32, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 31, 34, 36, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode_grades)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 32, 31, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert string scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 36, 37, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 37, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'],\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"B+\": 2, \"B\": 1, \"C+\": 0, \"C\": -1, \"D+\": -2, \"D\": -3, \"F\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011219978332519531, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Converts scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0052378177642822266, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].map(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002090930938720703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0020961761474609375, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 36, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 4, \"A-\": 3, \"B+\": 2, \"B\": 2, \"B-\": 1, \"C+\": 0, \"C\": 0, \"C-\": -1, \"D+\": -2, \"D\": -2, \"D-\": -3})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df.apply(lambda x: float(x[\"Score_String\"]), axis=1)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.00220489501953125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.00220489501953125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 37, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 31, 35, 36, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({\n    if len(df.index) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert string scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 31, 33, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 32, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('nan')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Converts scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0014300346374511719, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 32, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"A-\": 2, \"B+\": 1, \"B\": 0, \"B-\": -1, \"C+\": -2, \"C\": -3, \"C-\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode_grades)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011433839797973633, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 33, 32, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df.index) < 2:\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 32, 33, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 4, 'A+': 4.5, 'B': 3, 'B+': 3.5, 'C': 2, 'C+': 2.5, 'D': 1, 'D+': 1.5})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 34, 32, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return correlation", "compilation_passed": true, "time": 0.0020818710327148438, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 33, 34, 32, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 4, 'A+': 4.5, 'B': 3, 'B+': 3.5, 'C': 2, 'C+': 2.5, 'D': 1, 'D+': 1.5})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 32, 31, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df.index) < 2:\n        return float(\"nan\")\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode_grades)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 32, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01768016815185547, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [37, 32, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: ord(x) - ord(\"A\") + 1)  # Encodes grades into numerical values\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.factorize(df[\"Grade\"])[1]\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 34, 31, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"B+\": 2, \"B\": 1, \"C+\": 0, \"C\": -1, \"D+\": -2, \"D\": -3, \"F\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011355161666870117, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 32, 36, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].map(lambda x: float(x))  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 35, 37, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores to floats\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011708974838256836, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 31, 33, 36, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df.index) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.001993894577026367, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 31, 32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.factorize(df[\"Grade\"])[1]\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode_grades)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011219978332519531, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 4, 'A+': 4.5, 'B': 3, 'B+': 3.5, 'C': 2, 'C+': 2.5, 'D': 1, 'D+': 1.5})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 31, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 36, 33, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 31, 32, 36, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return np.nan\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 33, 37, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = pd.factorize(df[\"Grade\"])[1]\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 37, 33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('nan')\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6, 'D': 7, 'D+': 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 31, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"A-\": 2, \"B+\": 1, \"B\": 0, \"B-\": -1, \"C+\": -2, \"C\": -3, \"C-\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.03740692138671875, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 37, 31, 36, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores from string to floats\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"], categories=[\"A\", \"B\", \"C\", \"D\", \"F\"], ordered=False).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0016982555389404297, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 31, 37, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"A-\": 2, \"B+\": 1, \"B\": 0, \"B-\": -1, \"C+\": -2, \"C\": -3, \"C-\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011355161666870117, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 32, 33, 36, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df.apply(lambda x: float(x[\"Score_String\"]), axis=1)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4.0, \"A\": 4.0, \"A-\": 3.7, \"B+\": 3.3, \"B\": 3.0,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 37, 36, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].apply(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0021131038665771484, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 32, 34, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 36, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 10, \"A\": 9, \"A-\": 8, \"B+\": 7, \"B\": 6, \"B-\": 5, \"C+\": 4, \"C\": 3, \"C-\": 2, \"D+\": 1})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 31, 35, 32, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 31, 36, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 4, \"A-\": 3, \"B+\": 2, \"B\": 2, \"B-\": 1, \"C+\": 0, \"C\": 0, \"C-\": -1, \"D+\": -2, \"D\": -2, \"D-\": -3})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 37, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 34, 33, 32, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"A-\": 2, \"B+\": 1, \"B\": 0, \"B-\": -1, \"C+\": -2, \"C\": -3, \"C-\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.002104043960571289, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 37, 34, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6, 'D': 7, 'D+': 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002081155776977539, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 37, 34, 31, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 36, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': map(float, data['Score_String']), 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 10, \"A\": 9, \"A-\": 8, \"B+\": 7, \"B\": 6, \"B-\": 5, \"C+\": 4, \"C\": 3, \"C-\": 2, \"D+\": 1})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011708974838256836, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode_grades)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"B+\": 2, \"B\": 1, \"C+\": 0, \"C\": -1, \"D+\": -2, \"D\": -3, \"F\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.020899057388305664, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert string scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011429309844970703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0021140575408935547, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 37, 36, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert string scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.011482000350952148, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 4, 'A+': 4.5, 'B': 3, 'B+': 3.5, 'C': 2, 'C+': 2.5, 'D': 1, 'D+': 1.5})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 36, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"], categories=[\"A\", \"B\", \"C\", \"D\", \"F\"], ordered=False).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0017478466033935547, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return correlation", "compilation_passed": true, "time": 0.0021066665649414062, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 37, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 37, 31, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A+': 3, 'A': 2, 'A-': 1, 'B+': 4, 'B': 3, 'B-': 2, 'C+': 5, 'C': 4, 'C-': 3, 'D+': 6, 'D': 5, 'D-': 4, 'E': 1, 'F': 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 35, 37, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert string scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 31, 34, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [37, 32, 34, 36, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"], categories=[\"A\", \"B\", \"C\", \"D\", \"F\"], ordered=False).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"], categories=[\"A\", \"B\", \"C\", \"D\", \"F\"], ordered=False).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0016942024230957031, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 31, 32, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 10, \"A\": 9, \"A-\": 8, \"B+\": 7, \"B\": 6, \"B-\": 5, \"C+\": 4, \"C\": 3, \"C-\": 2, \"D+\": 1})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 34, 32, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].map(lambda x: float(x))  # Convert scores to float\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0020961761474609375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 37, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011680841445922852, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 33, 36, 32, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 4, \"A-\": 3, \"B+\": 2, \"B\": 2, \"B-\": 1, \"C+\": 0, \"C\": 0, \"C-\": -1, \"D+\": -2, \"D\": -2, \"D-\": -3})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011879920959472656, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0061798095703125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 32, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Converts scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A+': 3, 'A': 2, 'A-': 1, 'B+': 4, 'B': 3, 'B-': 2, 'C+': 5, 'C': 4, 'C-': 3, 'D+': 6, 'D': 5, 'D-': 4, 'E': 1, 'F': 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 35, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011347293853759766, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.002104043960571289, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011879920959472656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 31, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6, 'D': 7, 'D+': 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 37, 35, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.001940011978149414, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 34, 33, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 36, 34, 33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': map(float, data['Score_String']), 'Grade': data['Grade']})\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0020668506622314453, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [31, 36, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'],\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 32, 37, 36, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"], categories=[\"A\", \"B\", \"C\", \"D\", \"F\"], ordered=False).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0017809867858886719, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"B+\": 2, \"B\": 1, \"C+\": 0, \"C\": -1, \"D+\": -2, \"D\": -3, \"F\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 31, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'],\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'], errors='coerce')\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 37, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 10, \"A\": 9, \"A-\": 8, \"B+\": 7, \"B\": 6, \"B-\": 5, \"C+\": 4, \"C\": 3, \"C-\": 2, \"D+\": 1})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 37, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"], categories=[\"A\", \"B\", \"C\", \"D\", \"F\"], ordered=False).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0016918182373046875, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 36, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0020940303802490234, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"A-\": 2, \"B+\": 1, \"B\": 0, \"B-\": -1, \"C+\": -2, \"C\": -3, \"C-\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011879920959472656, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 33, 36, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"], categories=[\"A\", \"B\", \"C\", \"D\", \"F\"], ordered=False).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 34, 32, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores from string to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 31, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0013921260833740234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 32, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01768016815185547, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011219978332519531, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 37, 35, 34, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'])  # Convert scores to numeric\n    df[\"Grade_Encoded\"] = pd.factorize(df[\"Grade\"])[1]\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 34, 35, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"B+\": 2, \"B\": 1, \"C+\": 0, \"C\": -1, \"D+\": -2, \"D\": -3, \"F\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 34, 32, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].map(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.002202272415161133, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0019898414611816406, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 33, 34, 36, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = pd.factorize(df[\"Grade\"])[1]\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores to floats\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"A-\": 2, \"B+\": 1, \"B\": 0, \"B-\": -1, \"C+\": -2, \"C\": -3, \"C-\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33, 37, 32, 36, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 35, 31, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 32, 36, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0020568370819091797, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 35, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 32, 34, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].map(lambda x: float(x))  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 33, 36, 31, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 35, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"B+\": 2, \"B\": 1, \"C+\": 0, \"C\": -1, \"D+\": -2, \"D\": -3, \"F\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 33, 37, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"B+\": 2, \"B\": 1, \"C+\": 0, \"C\": -1, \"D+\": -2, \"D\": -3, \"F\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 35, 33, 36, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 4, \"A-\": 3, \"B+\": 2, \"B\": 2, \"B-\": 1, \"C+\": 0, \"C\": 0, \"C-\": -1, \"D+\": -2, \"D\": -2, \"D-\": -3})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.008874893188476562, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 33, 36, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 32, 36, 37, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('nan')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002141237258911133, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0014090538024902344, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 31, 34, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'],\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 35, 33, 34, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'])  # Convert scores to numeric\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.00214385986328125, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 35, 31, 36, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 36, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'],\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 35, 32, 36, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 4, 'A+': 4.5, 'B': 3, 'B+': 3.5, 'C': 2, 'C+': 2.5, 'D': 1, 'D+': 1.5})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011708974838256836, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002567768096923828, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 35, 31, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 31, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = pd.factorize(df[\"Grade\"])[1]\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to float\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0019850730895996094, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"A-\": 2, \"B+\": 1, \"B\": 0, \"B-\": -1, \"C+\": -2, \"C\": -3, \"C-\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.03740692138671875, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011249065399169922, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0060842037200927734, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode_grades)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4.0, \"A\": 4.0, \"A-\": 3.7, \"B+\": 3.3, \"B\": 3.0,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 10, \"A\": 9, \"A-\": 8, \"B+\": 7, \"B\": 6, \"B-\": 5, \"C+\": 4, \"C\": 3, \"C-\": 2, \"D+\": 1})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [37, 33, 34, 36, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'], errors='coerce')\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002368927001953125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 32, 36, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': map(float, data['Score_String']), 'Grade': data['Grade']})\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6, 'D': 7, 'D+': 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 37, 32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: ord(x) - ord(\"A\") + 1)  # Encodes grades into numerical values\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 37, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"], categories=[\"A\", \"B\", \"C\", \"D\", \"F\"], ordered=False).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 37, 36, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: ord(x) - ord(\"A\") + 1)  # Encodes grades into numerical values\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 32, 31, 37, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 4, 'A+': 4.5, 'B': 3, 'B+': 3.5, 'C': 2, 'C+': 2.5, 'D': 1, 'D+': 1.5})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.00220489501953125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A+': 3, 'A': 2, 'A-': 1, 'B+': 4, 'B': 3, 'B-': 2, 'C+': 5, 'C': 4, 'C-': 3, 'D+': 6, 'D': 5, 'D-': 4, 'E': 1, 'F': 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011708974838256836, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 37, 35, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'])  # Convert scores to numeric\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011366844177246094, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 33, 36, 32, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 32, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'], errors='coerce')\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 9, \"A\": 8, \"A-\": 7, \"B+\": 6, \"B\": 5, \"B-\": 4, \"C+\": 3, \"C\": 2, \"C-\": 1,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df.apply(lambda x: float(x[\"Score_String\"]), axis=1)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.00220489501953125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 35, 31, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.00220489501953125, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 33, 36, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to float\n    df[\"Grade_Encoded\"] = pd.factorize(df[\"Grade\"])[1]\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 33, 37, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'],\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 31, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"A-\": 2, \"B+\": 1, \"B\": 0, \"B-\": -1, \"C+\": -2, \"C\": -3, \"C-\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"B+\": 2, \"B\": 1, \"C+\": 0, \"C\": -1, \"D+\": -2, \"D\": -3, \"F\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.020899057388305664, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [34, 33, 32, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011708974838256836, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].map(lambda x: float(x))  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 33, 35, 31, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return np.NaN\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 31, 36, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: {\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0021588802337646484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 35, 33, 37, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].apply(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 37, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': list(map(float, data['Score_String'])),\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 36, 31, 32, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"A-\": 2, \"B+\": 1, \"B\": 0, \"B-\": -1, \"C+\": -2, \"C\": -3, \"C-\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 32, 33, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 37, 32, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].map(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 31, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 10, \"A\": 9, \"A-\": 8, \"B+\": 7, \"B\": 6, \"B-\": 5, \"C+\": 4, \"C\": 3, \"C-\": 2, \"D+\": 1})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].apply(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.005743980407714844, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 35, 32, 37, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011879920959472656, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 31, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].map(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"B+\": 2, \"B\": 1, \"C+\": 0, \"C\": -1, \"D+\": -2, \"D\": -3, \"F\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 37, 31, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode_grades)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 37, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].map(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 36, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.008874893188476562, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 37, 32, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0021979808807373047, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 35, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 33, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 35, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 34, 35, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 34, 33, 37, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 36, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'],\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 37, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36, 32, 34, 35, 31, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 4, \"A-\": 3, \"B+\": 2, \"B\": 2, \"B-\": 1, \"C+\": 0, \"C\": 0, \"C-\": -1, \"D+\": -2, \"D\": -2, \"D-\": -3})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 31, 36, 35, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A+': 3, 'A': 2, 'A-': 1, 'B+': 4, 'B': 3, 'B-': 2, 'C+': 5, 'C': 4, 'C-': 3, 'D+': 6, 'D': 5, 'D-': 4, 'E': 1, 'F': 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 32, 36, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 9, \"A\": 8, \"A-\": 7, \"B+\": 6, \"B\": 5, \"B-\": 4, \"C+\": 3, \"C\": 2, \"C-\": 1,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011879920959472656, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 35, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011879920959472656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 36, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': list(map(float, data['Score_String'])),\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: ord(x) - ord(\"A\") + 1)  # Encodes grades into numerical values\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Converts scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002077817916870117, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0021212100982666016, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 33, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0020759105682373047, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002177715301513672, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 35, 31, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6, 'D': 7, 'D+': 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 36, 35, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"], categories=[\"A\", \"B\", \"C\", \"D\", \"F\"], ordered=False).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 31, 34, 33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Converts scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011708974838256836, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.002051115036010742, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.022216081619262695, "tests_passed": false, "error": "numpy.core._exceptions._UFuncNoLoopError"}}
{"selected_lines": [33, 31, 32, 34, 37, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float('nan')\n    df[\"Score_Float\"] = df.apply(lambda x: float(x[\"Score_String\"]), axis=1)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0022122859954833984, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 31, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.factorize(df[\"Grade\"])[1]\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].map(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002090930938720703, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011708974838256836, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011879920959472656, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'], errors='coerce')\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002376079559326172, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 36, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': map(float, data['Score_String']), 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 37, 35, 34, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df.apply(lambda x: float(x[\"Score_String\"]), axis=1)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 31, 35, 34, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002067089080810547, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 10, \"A\": 9, \"A-\": 8, \"B+\": 7, \"B\": 6, \"B-\": 5, \"C+\": 4, \"C\": 3, \"C-\": 2, \"D+\": 1})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 35, 34, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002048015594482422, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": false, "time": 0.00024080276489257812, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 32, 34, 36, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 33, 32, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 32, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 4, \"A-\": 3, \"B+\": 2, \"B\": 2, \"B-\": 1, \"C+\": 0, \"C\": 0, \"C-\": -1, \"D+\": -2, \"D\": -2, \"D-\": -3})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33, 36, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 31, 37, 32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 31, 33, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: {\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 36, 31, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0021479129791259766, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.013435840606689453, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 33, 32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'], errors='coerce')\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 33, 37, 35, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 32, 36, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 31, 36, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Converts scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0020699501037597656, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df.apply(lambda x: float(x[\"Score_String\"]), axis=1)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.010077238082885742, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 37, 32, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.NaN\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 35, 34, 36, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': list(map(float, data['Score_String'])),\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 4, \"A-\": 3, \"B+\": 2, \"B\": 2, \"B-\": 1, \"C+\": 0, \"C\": 0, \"C-\": -1, \"D+\": -2, \"D\": -2, \"D-\": -3})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0021429061889648438, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011708974838256836, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.002104043960571289, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.00214385986328125, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.008874893188476562, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 31, 37, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": false, "time": 0.0004210472106933594, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 37, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 31, 36, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.001940011978149414, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert string scores to floats\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 34, 36, 32, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4.0, \"A\": 4.0, \"A-\": 3.7, \"B+\": 3.3, \"B\": 3.0,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df.apply(lambda x: float(x[\"Score_String\"]), axis=1)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 36, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0020949840545654297, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 32, 34, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 36, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': map(float, data['Score_String']), 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": false, "time": 0.0004661083221435547, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 34, 33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002045869827270508, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011879920959472656, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df.apply(lambda x: float(x[\"Score_String\"]), axis=1)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.010077238082885742, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.002251148223876953, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 32, 31, 36, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df.apply(lambda x: float(x[\"Score_String\"]), axis=1)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 36, 33, 35, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'],\n    if len(df) < 2:\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 31, 36, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': map(float, data['Score_String']), 'Grade': data['Grade']})\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 31, 34, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].map(lambda x: float(x))  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.002125978469848633, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 32, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': map(float, data['Score_String']), 'Grade': data['Grade']})\n    if len(df.index) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 33, 37, 36, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 34, 31, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4.0, \"A\": 4.0, \"A-\": 3.7, \"B+\": 3.3, \"B\": 3.0,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 35, 31, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 36, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': map(float, data['Score_String']), 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.015272855758666992, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode_grades)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 35, 33, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return float(\"nan\")\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6, 'D': 7, 'D+': 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0020568370819091797, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 36, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0019979476928710938, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0020673274993896484, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011269330978393555, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'],\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'])  # Convert scores to numeric\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 35, 36, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"A-\": 2, \"B+\": 1, \"B\": 0, \"B-\": -1, \"C+\": -2, \"C\": -3, \"C-\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 32, 35, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores to floats\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 35, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011708974838256836, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"], categories=[\"A\", \"B\", \"C\", \"D\", \"F\"], ordered=False).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 32, 36, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df.index) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002190828323364258, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 34, 37, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Converts scores from string format to floats\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011347293853759766, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": false, "time": 0.0005099773406982422, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [35, 34, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.factorize(df[\"Grade\"])[1]\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 35, 37, 32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = pd.factorize(df[\"Grade\"])[1]\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 32, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 37, 34, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: ord(x) - ord(\"A\") + 1)  # Encodes grades into numerical values\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'],\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: {\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": false, "time": 0.00016808509826660156, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 32, 34, 37, 35, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode_grades)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 33, 35, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 33, 31, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if df.shape[0] < 2:\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: {\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 37, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 36, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.008874893188476562, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 32, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0014526844024658203, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 31, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 36, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Converts scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0020439624786376953, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 36, 33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].map(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002029895782470703, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = pd.factorize(df[\"Grade\"])[1]\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 37, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': list(map(float, data['Score_String'])),\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 10, \"A\": 9, \"A-\": 8, \"B+\": 7, \"B\": 6, \"B-\": 5, \"C+\": 4, \"C\": 3, \"C-\": 2, \"D+\": 1})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.001993894577026367, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4.0, \"A\": 4.0, \"A-\": 3.7, \"B+\": 3.3, \"B\": 3.0,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 37, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 37, 34, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Converts scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 32, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 37, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0021109580993652344, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 34, 36, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002126932144165039, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 32, 34, 37, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"A-\": 2, \"B+\": 1, \"B\": 0, \"B-\": -1, \"C+\": -2, \"C\": -3, \"C-\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.00220489501953125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.002142190933227539, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 35, 33, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 36, 31, 32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0020380020141601562, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 36, 37, 31, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0021390914916992188, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 33, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6, 'D': 7, 'D+': 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 32, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': map(float, data['Score_String']), 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 4, 'A+': 4.5, 'B': 3, 'B+': 3.5, 'C': 2, 'C+': 2.5, 'D': 1, 'D+': 1.5})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 32, 34, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.NaN\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 4, 'A+': 4.5, 'B': 3, 'B+': 3.5, 'C': 2, 'C+': 2.5, 'D': 1, 'D+': 1.5})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 34, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.002185821533203125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].map(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 37, 32, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 34, 32, 31, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode_grades)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011708974838256836, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode_grades)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 32, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': map(float, data['Score_String']), 'Grade': data['Grade']})\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 36, 37, 32, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df.apply(lambda x: float(x[\"Score_String\"]), axis=1)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 34, 37, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 33, 31, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"B+\": 2, \"B\": 1, \"C+\": 0, \"C\": -1, \"D+\": -2, \"D\": -3, \"F\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 31, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 31, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002151966094970703, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002081155776977539, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 32, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: ord(x) - ord(\"A\") + 1)  # Encodes grades into numerical values\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0021109580993652344, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002177715301513672, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 33, 32, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 4, \"A-\": 3, \"B+\": 2, \"B\": 2, \"B-\": 1, \"C+\": 0, \"C\": 0, \"C-\": -1, \"D+\": -2, \"D\": -2, \"D-\": -3})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'], errors='coerce')\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 34, 35, 33, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"A-\": 2, \"B+\": 1, \"B\": 0, \"B-\": -1, \"C+\": -2, \"C\": -3, \"C-\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df.apply(lambda x: float(x[\"Score_String\"]), axis=1)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: {\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 31, 36, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 32, 33, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 10, \"A\": 9, \"A-\": 8, \"B+\": 7, \"B\": 6, \"B-\": 5, \"C+\": 4, \"C\": 3, \"C-\": 2, \"D+\": 1})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 37, 36, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'])  # Convert scores to numeric\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df['Score_String'].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0021560192108154297, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 32, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 33, 36, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.NaN\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.011482000350952148, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011269330978393555, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 34, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 4, \"A-\": 3, \"B+\": 2, \"B\": 2, \"B-\": 1, \"C+\": 0, \"C\": 0, \"C-\": -1, \"D+\": -2, \"D\": -2, \"D-\": -3})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A+': 3, 'A': 2, 'A-': 1, 'B+': 4, 'B': 3, 'B-': 2, 'C+': 5, 'C': 4, 'C-': 3, 'D+': 6, 'D': 5, 'D-': 4, 'E': 1, 'F': 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36, 35, 33, 31, 37, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'], errors='coerce')\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A+': 3, 'A': 2, 'A-': 1, 'B+': 4, 'B': 3, 'B-': 2, 'C+': 5, 'C': 4, 'C-': 3, 'D+': 6, 'D': 5, 'D-': 4, 'E': 1, 'F': 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 31, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 10, \"A\": 9, \"A-\": 8, \"B+\": 7, \"B\": 6, \"B-\": 5, \"C+\": 4, \"C\": 3, \"C-\": 2, \"D+\": 1})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'],\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: {\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": false, "time": 0.00016808509826660156, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 36, 32, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': list(map(float, data['Score_String'])),\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002134084701538086, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 10, \"A\": 9, \"A-\": 8, \"B+\": 7, \"B\": 6, \"B-\": 5, \"C+\": 4, \"C\": 3, \"C-\": 2, \"D+\": 1})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.021804094314575195, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37, 36, 32, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert string scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 32, 31, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"B+\": 2, \"B\": 1, \"C+\": 0, \"C\": -1, \"D+\": -2, \"D\": -3, \"F\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 34, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 37, 32, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].map(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 36, 35, 32, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 31, 35, 37, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 9, \"A\": 8, \"A-\": 7, \"B+\": 6, \"B\": 5, \"B-\": 4, \"C+\": 3, \"C\": 2, \"C-\": 1,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 36, 35, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 37, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002081155776977539, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 37, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 33, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 32, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].map(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.00220489501953125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.002207040786743164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 31, 32, 37, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002106189727783203, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 32, 34, 31, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': list(map(float, data['Score_String'])),\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": false, "time": 0.00013494491577148438, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 33, 36, 34, 32, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df.apply(lambda x: float(x[\"Score_String\"]), axis=1)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [37, 33, 34, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.002135038375854492, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 36, 33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].map(lambda x: float(x))  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.002047300338745117, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 31, 34, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to float\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 37, 36, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'])  # Convert scores to numeric\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.008874893188476562, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32, 36, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 4, \"A-\": 3, \"B+\": 2, \"B\": 2, \"B-\": 1, \"C+\": 0, \"C\": 0, \"C-\": -1, \"D+\": -2, \"D\": -2, \"D-\": -3})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 33, 37, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 31, 34, 37, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 4, \"A-\": 3, \"B+\": 2, \"B\": 2, \"B-\": 1, \"C+\": 0, \"C\": 0, \"C-\": -1, \"D+\": -2, \"D\": -2, \"D-\": -3})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 34, 37, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 10, \"A\": 9, \"A-\": 8, \"B+\": 7, \"B\": 6, \"B-\": 5, \"C+\": 4, \"C\": 3, \"C-\": 2, \"D+\": 1})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 34, 32, 33, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 34, 32, 31, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(lambda x: float(x))\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011680841445922852, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 32, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011879920959472656, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011569976806640625, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 35, 31, 32, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 4, \"A-\": 3, \"B+\": 2, \"B\": 2, \"B-\": 1, \"C+\": 0, \"C\": 0, \"C-\": -1, \"D+\": -2, \"D\": -2, \"D-\": -3})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.012866973876953125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 32, 37, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].map(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 4, 'A+': 4.5, 'B': 3, 'B+': 3.5, 'C': 2, 'C+': 2.5, 'D': 1, 'D+': 1.5})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 34, 31, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].map(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6, 'D': 7, 'D+': 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 36, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"], categories=[\"A\", \"B\", \"C\", \"D\", \"F\"], ordered=False).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 35, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'])  # Convert scores to numeric\n    df[\"Grade_Encoded\"] = pd.factorize(df[\"Grade\"])[1]\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011879920959472656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011879920959472656, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011708974838256836, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0020668506622314453, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 31, 33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"], categories=[\"A\", \"B\", \"C\", \"D\", \"F\"], ordered=False).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0017778873443603516, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0020999908447265625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 32, 36, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'], errors='coerce')\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0023539066314697266, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].map(lambda x: float(x))  # Convert scores to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'], errors='coerce')\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.007663249969482422, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 31, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Converts scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0020799636840820312, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 31, 35, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': list(map(float, data['Score_String'])),\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"], categories=[\"A\", \"B\", \"C\", \"D\", \"F\"], ordered=False).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 31, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.002064228057861328, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.002081155776977539, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 31, 36, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 36, 34, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"B+\": 2, \"B\": 1, \"C+\": 0, \"C\": -1, \"D+\": -2, \"D\": -3, \"F\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 31, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 4, 'A+': 4.5, 'B': 3, 'B+': 3.5, 'C': 2, 'C+': 2.5, 'D': 1, 'D+': 1.5})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 33, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 37, 32, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(lambda x: ord(x) - ord(\"A\") + 1)  # Encodes grades into numerical values\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 32, 37, 31, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"B+\": 2, \"B\": 1, \"C+\": 0, \"C\": -1, \"D+\": -2, \"D\": -3, \"F\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 35, 31, 36, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A+': 3, 'A': 2, 'A-': 1, 'B+': 4, 'B': 3, 'B-': 2, 'C+': 5, 'C': 4, 'C-': 3, 'D+': 6, 'D': 5, 'D-': 4, 'E': 1, 'F': 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].map(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]  # Compute Pearson correlation coefficient\n    return correlation", "compilation_passed": true, "time": 0.0020580291748046875, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34, 31, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].apply(float)  # Convert scores from string format to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A+': 3, 'A': 2, 'A-': 1, 'B+': 4, 'B': 3, 'B-': 2, 'C+': 5, 'C': 4, 'C-': 3, 'D+': 6, 'D': 5, 'D-': 4, 'E': 1, 'F': 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 33, 34, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 9, \"A\": 8, \"A-\": 7, \"B+\": 6, \"B\": 5, \"B-\": 4, \"C+\": 3, \"C\": 2, \"C-\": 1,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores to floats\n    df[\"Grade_Encoded\"] = pd.factorize(df[\"Grade\"])[1]\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.002207040786743164, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011347293853759766, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.012866973876953125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 37, 36, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df['Score_String'].apply(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0020732879638671875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 31, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 33, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4.0, \"A\": 4.0, \"A-\": 3.7, \"B+\": 3.3, \"B\": 3.0,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 36, 34, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 31, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({'A': 4, 'A+': 4.5, 'B': 3, 'B+': 3.5, 'C': 2, 'C+': 2.5, 'D': 1, 'D+': 1.5})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01768016815185547, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 37, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0020720958709716797, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011708974838256836, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 36, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return np.NaN\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 32, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if df.shape[0] < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0025260448455810547, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 34, 37, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': list(map(float, data['Score_String'])),\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 3, \"B+\": 2, \"B\": 1, \"C+\": 0, \"C\": -1, \"D+\": -2, \"D\": -3, \"F\": -4})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.020899057388305664, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011219978332519531, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": false, "time": 0.00024080276489257812, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [31, 33, 34, 36, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert the score column to a float column\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4.0, \"A\": 4.0, \"A-\": 3.7, \"B+\": 3.3, \"B\": 3.0,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 32, 35, 31, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'],\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 10, \"A\": 9, \"A-\": 8, \"B+\": 7, \"B\": 6, \"B-\": 5, \"C+\": 4, \"C\": 3, \"C-\": 2, \"D+\": 1})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 34, 35, 31, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return np.nan\n    df[\"Score_Float\"] = [float(score) for score in df.pop(\"Score_String\")]\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 33, 35, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df.apply(lambda x: float(x[\"Score_String\"]), axis=1)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 32, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].replace({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8, \"C-\": 9, \"D+\": 10, \"D\": 11, \"D-\": 12, \"F\": 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': list(map(float, data['Score_String'])),\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 34, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('nan')\n    df[\"Score_Float\"] = df['Score_String'].astype(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 4, \"A-\": 3, \"B+\": 2, \"B\": 2, \"B-\": 1, \"C+\": 0, \"C\": 0, \"C-\": -1, \"D+\": -2, \"D\": -2, \"D-\": -3})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.001993894577026367, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011219978332519531, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 34, 37, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df['Score_String'], errors='coerce')\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A': 1, 'A+': 2, 'B': 3, 'B+': 4, 'C': 5, 'C+': 6, 'D': 7, 'D+': 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.019970178604125977, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [35, 36, 32, 31, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:\n        return float(\"nan\")\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 36, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 35, 33, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({'A+': 3, 'A': 2, 'A-': 1, 'B+': 4, 'B': 3, 'B-': 2, 'C+': 5, 'C': 4, 'C-': 3, 'D+': 6, 'D': 5, 'D-': 4, 'E': 1, 'F': 0})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 35, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if df.shape[0] < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"]).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.002032756805419922, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 35, 37, 32], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = pd.to_numeric(df[\"Score_String\"])\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 4, \"A-\": 3, \"B+\": 2, \"B\": 2, \"B-\": 1, \"C+\": 0, \"C\": 0, \"C-\": -1, \"D+\": -2, \"D\": -2, \"D-\": -3})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 32, 35, 33, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float('nan')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(encode_grades)\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 33, 37, 32, 31], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score': map(float, data['Score_String']), 'Grade': data['Grade']})\n    if df.shape[0] < 2:\n        return np.nan\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 1, \"A\": 2, \"A-\": 3, \"B+\": 4, \"B\": 5, \"B-\": 6, \"C+\": 7, \"C\": 8,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].astype(\"category\").cat.codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.011269330978393555, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 31, 32, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4.0, \"A\": 4.0, \"A-\": 3.7, \"B+\": 3.3, \"B\": 3.0,\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame({'Score_String': data['Score_String'], 'Grade': data['Grade']})\n    if len(df) < 2:  # Check if the data frame has less than 2 rows\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = df[\"Grade\"].apply(\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 35, 32, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].apply(float)  # Convert scores to floats\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\"A+\": 4, \"A\": 4, \"A-\": 3, \"B+\": 2, \"B\": 2, \"B-\": 1, \"C+\": 0, \"C\": 0, \"C-\": -1, \"D+\": -2, \"D\": -2, \"D-\": -3})\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return round(correlation, 2)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 33, 32, 34, 36], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df.index) < 2:\n        return float('NaN')\n    df[\"Score_Float\"] = df[\"Score_String\"].map(float)  # Convert scores from string to float\n    df[\"Grade_Encoded\"] = df[\"Grade\"].map({\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35], "result": {"code": "import pandas as pd\nfrom scipy.stats import pearsonr\n\n\ndef task_func(data):\n    \"\"\"\n    Calculates the Pearson correlation coefficient between numerical scores and categorical grades.\n\n    This function performs three main tasks:\n    1. Converts scores from string format to floats.\n    2. Encodes categorical grades into numerical values based on their rank order.\n    3. Computes the Pearson correlation coefficient between the numerical scores and the encoded grades.\n\n    Parameters:\n    - data (dict): A dictionary containing two keys:\n                 - 'Score_String': A list of scores in string format.\n                 - 'Grade': A list of corresponding grades in string format.\n                 Each list under these keys must have the same length.\n\n    Returns:\n    - correlation (float): The Pearson correlation coefficient between the converted numerical scores and encoded grades.\n           Returns NaN if the input data frame has less than 2 rows, as the correlation coefficient cannot be calculated in this case.\n\n    Requirements:\n    - pandas\n    - scipy\n\n    Example:\n    >>> round(task_func({'Score_String': ['80.5', '85.7', '90.2'], 'Grade': ['B', 'B+', 'A-']}),2)\n    -0.46\n    \"\"\"\n    df = pd.DataFrame(data)\n    if len(df) < 2:\n        return float(\"nan\")  # or return None\n    df[\"Score_Float\"] = df[\"Score_String\"].astype(float)\n    df[\"Grade_Encoded\"] = pd.Categorical(df[\"Grade\"], categories=[\"A\", \"B\", \"C\", \"D\", \"F\"], ordered=False).codes\n    correlation = pearsonr(df[\"Score_Float\"], df[\"Grade_Encoded\"])[0]\n    return correlation", "compilation_passed": true, "time": 0.0016942024230957031, "tests_passed": true, "error": null}}
