{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'tar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.015048980712890625, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017447710037231445, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 44, 40, 33, 42, 36, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}'.\", e)\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 43, 41, 44, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder {src_folder} does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0047490596771240234, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 43, 37, 41, 34, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"{src_folder} does not exist\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0040950775146484375, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"An error occurred while deleting the source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.010768890380859375, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 41, 44, 42, 33, 37, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 41, 33, 43, 42, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error while deleting source folder: {e}')\n        return False", "compilation_passed": true, "time": 0.0014929771423339844, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 33, 36, 34, 44, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.004152059555053711, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0111541748046875, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 36, 41, 34, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004063129425048828, "tests_passed": true, "error": null}}
{"selected_lines": [43, 42, 40, 37, 41, 34, 36, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 43, 40, 33, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error deleting source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.001359701156616211, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 36, 41, 33, 44, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 44, 43, 40, 34, 36, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"{src_folder} is not a directory\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 33, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder '{src_folder}': {str(e)}\")\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.003988981246948242, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 36, 44, 42, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0012350082397460938, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 33, 43, 40, 41, 44, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 37, 43, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001249074935913086, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 44, 43, 37, 40, 34, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error occurred while deleting the source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.003987789154052734, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42, 34, 37, 33, 40, 43, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist: {}'.format(src_folder))\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.003918170928955078, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 41, 33, 36, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 34, 43, 44, 37, 40, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.006639957427978516, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 34, 42, 44, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0040340423583984375, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 42, 41, 44, 43, 40, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.split(os.sep)[-1])\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.003988981246948242, "tests_passed": true, "error": null}}
{"selected_lines": [44, 43, 36, 41, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backups', os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error deleting source folder:\", str(e))\n        return False", "compilation_passed": true, "time": 0.001753091812133789, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 43, 44, 41, 40, 37, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}\", file=sys.stderr)\n        return False", "compilation_passed": true, "time": 0.005269765853881836, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error while deleting source folder: {e}')\n        return False", "compilation_passed": true, "time": 0.004971981048583984, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010612964630126953, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 44, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00863504409790039, "tests_passed": true, "error": null}}
{"selected_lines": [33, 44, 37, 43, 34, 36, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist: {}'.format(src_folder))\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 41, 44, 37, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004111051559448242, "tests_passed": true, "error": null}}
{"selected_lines": [33, 44, 42, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}\", file=sys.stderr)\n        return False", "compilation_passed": true, "time": 0.003997087478637695, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'tar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001332998275756836, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 41, 43, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Failed to delete source folder: {src_folder}. Reason: {e}\")\n        return False", "compilation_passed": true, "time": 0.0012249946594238281, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [43, 44, 41, 40, 34, 42, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error deleting source folder:\", str(e))\n        return False", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 42, 34, 43, 44, 41, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"The source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.003947019577026367, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from math import sqrt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 40, 36, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 34, 37, 41, 33, 42, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"{src_folder} is not a directory\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 33, 44, 43, 34, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f'Error: {str(e)}')\n        return False<|endoftext|>from __future__ import annotations", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 41, 44, 42, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Failed to delete source folder: {src_folder}\", file=sys.stderr)\n        return False", "compilation_passed": true, "time": 0.0012671947479248047, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 37, 44, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0011928081512451172, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 36, 43, 42, 40, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0040130615234375, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup_' + os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00789785385131836, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error occurred while deleting the source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.010587215423583984, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 40, 42, 37, 44, 41, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"{src_folder} does not exist\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False<|endoftext|>#!/bin/python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.move(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.006644010543823242, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 36, 42, 34, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist: {}'.format(src_folder))\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.move(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 37, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 43, 36, 40, 37, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0040149688720703125, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017447710037231445, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 42, 44, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 34, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"The source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0012171268463134766, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004292011260986328, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004090070724487305, "tests_passed": true, "error": null}}
{"selected_lines": [33, 42, 37, 34, 41, 43, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013461112976074219, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0053598880767822266, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 33, 37, 44, 43, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backups', os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.0016760826110839844, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.split(os.sep)[-1])\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [44, 33, 40, 41, 36, 34, 43, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {str(e)}')\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 41, 43, 40, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"An error occurred while deleting the source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.004456996917724609, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011782169342041016, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 44, 36, 33, 40, 43, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004494905471801758, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 34, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.003929853439331055, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010612964630126953, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 34, 37, 43, 33, 41, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'The source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"An error occurred while deleting the source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.0012443065643310547, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 40, 42, 36, 44, 33, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {src_folder}. Error: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.003971099853515625, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {e}')\n        return False", "compilation_passed": true, "time": 0.011082172393798828, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 36, 33, 42, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f'Error: {e}')\n        return False", "compilation_passed": true, "time": 0.0012209415435791016, "tests_passed": true, "error": null}}
{"selected_lines": [43, 42, 40, 37, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error while deleting source folder: {e}')\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 44, 42, 43, 33, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup_' + os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f'Error: {str(e)}')\n        return False", "compilation_passed": true, "time": 0.0011620521545410156, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"The source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.016707181930541992, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 40, 43, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error occurred while deleting the source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.00398707389831543, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 43, 36, 34, 37, 44, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error while deleting source folder: {e}')\n        return False", "compilation_passed": true, "time": 0.004044771194458008, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 34, 36, 42, 44, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0038869380950927734, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.017054080963134766, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error while deleting source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.01683211326599121, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 41, 42, 44, 37, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0039691925048828125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 44, 43, 41, 40, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}'.\", e)\n        return False", "compilation_passed": true, "time": 0.005133152008056641, "tests_passed": true, "error": null}}
{"selected_lines": [37, 44, 36, 41, 43, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00609898567199707, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 33, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.move(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.002808809280395508, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [37, 40, 43, 36, 41, 42, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0040950775146484375, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 33, 41, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = f\"{backup_dir}/{os.path.basename(src_folder)}\"\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00119781494140625, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 41, 34, 42, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from __future__ import annotations", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 43, 42, 44, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 43, 40, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.003998994827270508, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 40, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00391387939453125, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0111541748046875, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder \"{src_folder}\" does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.0039217472076416016, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 42, 34, 33, 41, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.0012049674987792969, "tests_passed": true, "error": null}}
{"selected_lines": [37, 44, 34, 36, 40, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'tar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.014139890670776367, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004090070724487305, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010612964630126953, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 37, 40, 44, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder does not exist: {src_folder}\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 36, 44, 43, 41, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error occurred while deleting the source folder: {str(e)}\")\n        return False<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017447710037231445, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 40, 37, 44, 34, 43, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001249074935913086, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001416921615600586, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 44, 36, 42, 34, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013990402221679688, "tests_passed": true, "error": null}}
{"selected_lines": [33, 44, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'tar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 34, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {str(e)}')\n        return False", "compilation_passed": true, "time": 0.0011889934539794922, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 34, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"The source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = f\"{backup_dir}/{os.path.basename(src_folder)}\"\n    shutil.make_archive(backup_folder, 'tar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 37, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.move(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 43, 36, 37, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}\", file=sys.stderr)\n        return False", "compilation_passed": true, "time": 0.004272937774658203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 40, 36, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup_' + os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0020520687103271484, "tests_passed": true, "error": null}}
{"selected_lines": [43, 40, 37, 34, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0014121532440185547, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 33, 44, 43, 42, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error while deleting source folder:\", e)\n        return False<|endoftext|>from math import sqrt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'The source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010838031768798828, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 41, 34, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.replace('/', '_').replace('\\\\', '_'))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001222848892211914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0043277740478515625, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [33, 44, 34, 41, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from __future__ import annotations", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 33, 37, 44, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0011928081512451172, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 36, 43, 42, 40, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0040130615234375, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 41, 43, 40, 44, 34, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {src_folder}. Error: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0014400482177734375, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 34, 44, 42, 41, 40, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"{src_folder} does not exist\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 34, 43, 40, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0050013065338134766, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 36, 40, 44, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 36, 37, 43, 40, 44, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.move(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {str(e)}')\n        return False", "compilation_passed": true, "time": 0.001277923583984375, "tests_passed": true, "error": null}}
{"selected_lines": [43, 40, 36, 34, 44, 42, 37, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist: {}'.format(src_folder))\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.replace('/', '_').replace('\\\\', '_'))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}'.\", e)\n        return False", "compilation_passed": true, "time": 0.001474142074584961, "tests_passed": true, "error": null}}
{"selected_lines": [34, 43, 33, 42, 37, 44, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.003954887390136719, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 43, 41, 44, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder {src_folder} does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0047490596771240234, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 41, 36, 33, 44, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004019975662231445, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 43, 36, 41, 44, 42, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backups', os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(\"Error while deleting source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.0014998912811279297, "tests_passed": true, "error": null}}
{"selected_lines": [34, 43, 42, 36, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"The source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013568401336669922, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 37, 42, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist: {}'.format(src_folder))\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0012669563293457031, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0040171146392822266, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 44, 33, 43, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup')\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}. Reason: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013720989227294922, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {src_folder}. Error: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.003969907760620117, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 36, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.003915548324584961, "tests_passed": true, "error": null}}
{"selected_lines": [34, 44, 41, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder \"{src_folder}\" does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from math import sqrt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 41, 33, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'The source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.003988981246948242, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 43, 36, 33, 44, 37, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder {src_folder} does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.0014390945434570312, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017447710037231445, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 44, 37, 42, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0011639595031738281, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00863504409790039, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0053598880767822266, "tests_passed": true, "error": null}}
{"selected_lines": [34, 43, 44, 41, 40, 37, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"An error occurred while deleting the source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.003922224044799805, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 34, 43, 40, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0050013065338134766, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 34, 42, 41, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {str(e)}')\n        return False", "compilation_passed": true, "time": 0.0011649131774902344, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 36, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"{src_folder} is not a directory\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.005448818206787109, "tests_passed": true, "error": null}}
{"selected_lines": [43, 40, 37, 34, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0014121532440185547, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {e}')\n        return False", "compilation_passed": true, "time": 0.011082172393798828, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 44, 36, 33, 40, 43, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004494905471801758, "tests_passed": true, "error": null}}
{"selected_lines": [33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.004788875579833984, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 41, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"{src_folder} does not exist\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 42, 41, 37, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f'Error while deleting source folder: {e}')\n        return False", "compilation_passed": true, "time": 0.004315853118896484, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011782169342041016, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 44, 36, 33, 40, 43, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004494905471801758, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"An error occurred while deleting the source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.003994941711425781, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.012869119644165039, "tests_passed": true, "error": null}}
{"selected_lines": [43, 42, 41, 36, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001199960708618164, "tests_passed": true, "error": null}}
{"selected_lines": [44, 33, 41, 40, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from math import sqrt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.split(os.sep)[-1])\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.009901046752929688, "tests_passed": true, "error": null}}
{"selected_lines": [33, 43, 37, 42, 40, 41, 34, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 44, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist: {}'.format(src_folder))\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004129648208618164, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.012869119644165039, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0111541748046875, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 36, 34, 33, 41, 37, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.split(os.sep)[-1])\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 41, 37, 43, 36, 42, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0040051937103271484, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 43, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}\", file=sys.stderr)\n        return False", "compilation_passed": true, "time": 0.00397801399230957, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 40, 36, 44, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013470649719238281, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 34, 37, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004311084747314453, "tests_passed": true, "error": null}}
{"selected_lines": [44, 43, 36, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'tar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001371145248413086, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.013241052627563477, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [34, 41, 43, 44, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder \"{src_folder}\" does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004021883010864258, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 37, 34, 33, 44, 43, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False<|endoftext|>from __future__ import annotations", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 44, 40, 34, 37, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'tar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001291036605834961, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017447710037231445, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 44, 33, 37, 40, 42, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder {src_folder} does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013899803161621094, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.012869119644165039, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = f\"{backup_dir}/{os.path.basename(src_folder)}\"\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011537790298461914, "tests_passed": true, "error": null}}
{"selected_lines": [44, 33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False<|endoftext|>#!/bin/python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 41, 33, 44, 34, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error deleting source folder:\", str(e))\n        return False", "compilation_passed": true, "time": 0.0013210773468017578, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.011132001876831055, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error occurred while deleting the source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.010587215423583984, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 40, 33, 37, 36, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001583099365234375, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 41, 43, 37, 44, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error while deleting source folder: {e}')\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 41, 36, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0055370330810546875, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.004186868667602539, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 34, 36, 44, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backups', os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0014977455139160156, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist: {}'.format(src_folder))\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.017054080963134766, "tests_passed": true, "error": null}}
{"selected_lines": [36, 44, 43, 42, 33, 41, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder {src_folder} does not exist.\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error occurred while deleting the source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 43, 40, 41, 36, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder '{src_folder}'.\", e)\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 43, 37, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"{src_folder} is not a directory\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.move(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {e}')\n        return False", "compilation_passed": true, "time": 0.0010569095611572266, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 43, 33, 44, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from __future__ import annotations", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00976419448852539, "tests_passed": true, "error": null}}
{"selected_lines": [43, 42, 36, 33, 40, 37, 34, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {str(e)}')\n        return False", "compilation_passed": true, "time": 0.01137995719909668, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {str(e)}')\n        return False", "compilation_passed": true, "time": 0.01137995719909668, "tests_passed": true, "error": null}}
{"selected_lines": [37, 44, 33, 43, 40, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.0013039112091064453, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 42, 41, 40, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0111541748046875, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 43, 33, 44, 36, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = f\"{backup_dir}/{os.path.basename(src_folder)}\"\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.004127025604248047, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 42, 37, 34, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}'.\", e)\n        return False", "compilation_passed": true, "time": 0.0040378570556640625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 43, 37, 34, 36, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"{src_folder} does not exist\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.move(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}'.\", e)\n        return False", "compilation_passed": true, "time": 0.0010597705841064453, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 34, 33, 44, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder '{src_folder}'.\", e)\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 41, 37, 40, 33, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0111541748046875, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error while deleting source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.004036903381347656, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 37, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder {src_folder} does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0012087821960449219, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 34, 44, 40, 36, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error while deleting source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.0014789104461669922, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error occurred while deleting the source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.010587215423583984, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 41, 36, 40, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 40, 36, 44, 37, 33, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 37, 43, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001249074935913086, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 44, 43, 37, 40, 34, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error occurred while deleting the source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.003987789154052734, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 34, 43, 41, 44, 36, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}. Reason: {e}\")\n        return False", "compilation_passed": true, "time": 0.0040187835693359375, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 34, 43, 41, 37, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.001222848892211914, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 44, 36, 42, 34, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013990402221679688, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 36, 42, 33, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 33, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error while deleting source folder: {e}')\n        return False", "compilation_passed": true, "time": 0.004048824310302734, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 42, 43, 33, 37, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 41, 33, 42, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0014081001281738281, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 41, 37, 42, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0111541748046875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 37, 43, 40, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"{src_folder} does not exist\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error while deleting source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.004016876220703125, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [37, 44, 34, 41, 36, 42, 40, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error while deleting source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.005321979522705078, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 41, 42, 40, 36, 43, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(\"Error deleting source folder:\", str(e))\n        return False", "compilation_passed": true, "time": 0.005471944808959961, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 33, 44, 41, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {e}')\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 33, 43, 36, 42, 44, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.00402379035949707, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 37, 36, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.004420042037963867, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist: {}'.format(src_folder))\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0191800594329834, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0111541748046875, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 41, 44, 37, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004111051559448242, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.replace('/', '_').replace('\\\\', '_'))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from __future__ import annotations", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 36, 43, 42, 40, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0040130615234375, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from __future__ import annotations", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 33, 40, 34, 41, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder {src_folder} does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004055023193359375, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00863504409790039, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 43, 37, 44, 41, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False<|endoftext|>from math import sqrt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 42, 37, 33, 41, 36, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'tar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013339519500732422, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011782169342041016, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 41, 37, 36, 33, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist: {}'.format(src_folder))\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup_' + os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010966062545776367, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 40, 42, 36, 37, 34, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0012640953063964844, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42, 40, 34, 44, 43, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {str(e)}')\n        return False", "compilation_passed": true, "time": 0.003982067108154297, "tests_passed": true, "error": null}}
{"selected_lines": [37, 44, 33, 34, 42, 41, 40, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder does not exist: {src_folder}\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error occurred while deleting the source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.003991842269897461, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 36, 44, 37, 41, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.move(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0010559558868408203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 37, 42, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist: {}'.format(src_folder))\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0012669563293457031, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 44, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.0040400028228759766, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error while deleting source folder: {e}')\n        return False", "compilation_passed": true, "time": 0.004971981048583984, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.012869119644165039, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011782169342041016, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.036058902740478516, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 36, 42, 40, 34, 33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f'Error: {e}')\n        return False", "compilation_passed": true, "time": 0.004055976867675781, "tests_passed": true, "error": null}}
{"selected_lines": [33, 43, 44, 42, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder: {e}\")\n        return False<|endoftext|>#!/bin/python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017447710037231445, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004090070724487305, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 33, 36, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 42, 34, 40, 33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {src_folder}. Error: {str(e)}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011782169342041016, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 41, 37, 33, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0012309551239013672, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 44, 37, 33, 40, 43, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"{src_folder} is not a directory\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"An error occurred while deleting the source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.004542827606201172, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010612964630126953, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 34, 37, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004311084747314453, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 41, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.005303144454956055, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 42, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.move(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0012660026550292969, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from __future__ import annotations", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 43, 33, 40, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.replace('/', '_').replace('\\\\', '_'))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001438140869140625, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 36, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.003915548324584961, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 43, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.split(os.sep)[-1])\n    shutil.make_archive(backup_folder, 'tar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001294851303100586, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 40, 43, 42, 44, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.split(os.sep)[-1])\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004558086395263672, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001405954360961914, "tests_passed": true, "error": null}}
{"selected_lines": [44, 43, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error deleting source folder:\", str(e))\n        return False", "compilation_passed": true, "time": 0.0011930465698242188, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 37, 41, 43, 40, 36, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0014028549194335938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.0039708614349365234, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 44, 33, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error while deleting source folder:\", e)\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 41, 44, 37, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.move(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error deleting source folder:\", str(e))\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {e}')\n        return False", "compilation_passed": true, "time": 0.011082172393798828, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 44, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.split(os.sep)[-1])\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004027128219604492, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 37, 41, 33, 34, 42, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}. Reason: {e}\")\n        return False", "compilation_passed": true, "time": 0.012420892715454102, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017447710037231445, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 43, 44, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False<|endoftext|>from math import sqrt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 43, 42, 36, 44, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}': {e}\")\n        return False<|endoftext|>from math import sqrt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004064083099365234, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 43, 36, 41, 37, 34, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 34, 36, 43, 40, 33, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0012211799621582031, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 33, 41, 37, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup')\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013499259948730469, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00863504409790039, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 37, 42, 41, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder \"{src_folder}\" does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0012059211730957031, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"{src_folder} is not a directory\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error occurred while deleting the source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.004079103469848633, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"{src_folder} is not a directory\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.009763002395629883, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 44, 43, 42, 37, 40, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 40, 42, 34, 36, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.0012221336364746094, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"{src_folder} does not exist\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010149002075195312, "tests_passed": true, "error": null}}
{"selected_lines": [33, 43, 34, 44, 36, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder does not exist: {src_folder}\")\n    # Backup folder\n    backup_folder = f\"{backup_dir}/{os.path.basename(src_folder)}\"\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017447710037231445, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001422882080078125, "tests_passed": true, "error": null}}
{"selected_lines": [44, 43, 37, 41, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.012869119644165039, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 44, 40, 34, 37, 36, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist: {}'.format(src_folder))\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'tar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0013060569763183594, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 40, 36, 44, 37, 42, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}': {e}\")\n        return False<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 41, 44, 37, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004111051559448242, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 44, 40, 36, 33, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.split(os.sep)[-1])\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0037550926208496094, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010612964630126953, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 40, 43, 37, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0053598880767822266, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 33, 37, 42, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.005063295364379883, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 43, 36, 33, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010966062545776367, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 36, 44, 42, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0012350082397460938, "tests_passed": true, "error": null}}
{"selected_lines": [36, 44, 37, 33, 34, 43, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder does not exist: {src_folder}\")\n    # Backup folder\n    backup_folder = f\"{backup_dir}/{os.path.basename(src_folder)}\"\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004812955856323242, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.0040400028228759766, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33, 43, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist: {}'.format(src_folder))\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'tar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0014760494232177734, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [43, 44, 42, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error while deleting source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.0040700435638427734, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.01249074935913086, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 41, 37, 43, 33, 34, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder \"{src_folder}\" does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.003929853439331055, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 43, 40, 36, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}. Reason: {e}\")\n        return False", "compilation_passed": true, "time": 0.0040400028228759766, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 44, 40, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder '{src_folder}': {str(e)}\")\n        return False<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 41, 33, 37, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error deleting source folder:\", str(e))\n        return False", "compilation_passed": true, "time": 0.0012209415435791016, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 40, 33, 41, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013632774353027344, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 44, 43, 34, 37, 42, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist: {}'.format(src_folder))\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {str(e)}')\n        return False", "compilation_passed": true, "time": 0.0011799335479736328, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 33, 43, 34, 37, 44, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'The source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup')\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error while deleting source folder: {e}')\n        return False", "compilation_passed": true, "time": 0.0014557838439941406, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.012869119644165039, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001416921615600586, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 42, 37, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup_' + os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0014109611511230469, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.013241052627563477, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [40, 37, 44, 36, 42, 34, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013990402221679688, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010612964630126953, "tests_passed": true, "error": null}}
{"selected_lines": [43, 44, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"An error occurred while deleting the source folder:\", e)\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001416921615600586, "tests_passed": true, "error": null}}
{"selected_lines": [44, 43, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {str(e)}')\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from math import sqrt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 42, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 44, 42, 36, 33, 43, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder '{src_folder}'.\", e)\n        return False", "compilation_passed": true, "time": 0.0012121200561523438, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010966062545776367, "tests_passed": true, "error": null}}
{"selected_lines": [33, 44, 42, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}\", file=sys.stderr)\n        return False", "compilation_passed": true, "time": 0.003997087478637695, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00863504409790039, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 43, 36, 34, 37, 44, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error while deleting source folder: {e}')\n        return False", "compilation_passed": true, "time": 0.004044771194458008, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 42, 34, 41, 40, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 37, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0011739730834960938, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004090070724487305, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 37, 34, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder \"{src_folder}\" does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00401616096496582, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.01249074935913086, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017447710037231445, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 40, 41, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0014147758483886719, "tests_passed": true, "error": null}}
{"selected_lines": [44, 43, 36, 37, 33, 42, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup_' + os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error deleting source folder:\", str(e))\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 36, 34, 40, 42, 41, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.split(os.sep)[-1])\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004015922546386719, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {src_folder}. Error: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0150299072265625, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.019070148468017578, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 44, 37, 40, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"{src_folder} does not exist\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0012199878692626953, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 41, 40, 43, 33, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder \"{src_folder}\" does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"An error occurred while deleting the source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.0042498111724853516, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [34, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 42, 34, 36, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder does not exist: {src_folder}\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from __future__ import annotations", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 41, 36, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0055370330810546875, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 33, 34, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 42, 41, 36, 43, 37, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error occurred while deleting the source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0013418197631835938, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010966062545776367, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder {src_folder} does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010921001434326172, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 40, 44, 41, 33, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004122018814086914, "tests_passed": true, "error": null}}
{"selected_lines": [36, 44, 33, 42, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backups', os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001505136489868164, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 42, 36, 44, 40, 33, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>#!/bin/python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder {src_folder} does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {src_folder}. Error: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.005350828170776367, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 44, 36, 34, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>#!/bin/python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 33, 41, 36, 34, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.005401134490966797, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 36, 42, 33, 41, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backups', os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0018150806427001953, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 44, 41, 40, 37, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0014450550079345703, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 36, 33, 37, 44, 40, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004465818405151367, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 34, 44, 37, 40, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error while deleting source folder: {e}')\n        return False", "compilation_passed": true, "time": 0.0048182010650634766, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}\", file=sys.stderr)\n        return False", "compilation_passed": true, "time": 0.011417150497436523, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"An error occurred while deleting the source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.003994941711425781, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 33, 41, 36, 34, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.005401134490966797, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017447710037231445, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.012869119644165039, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 43, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004392147064208984, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004090070724487305, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 33, 44, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder does not exist: {src_folder}\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00435185432434082, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 34, 43, 41, 37, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.001222848892211914, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 36, 33, 40, 44, 41, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.move(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0011661052703857422, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010612964630126953, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 36, 41, 43, 42, 37, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder \"{src_folder}\" does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}': {e}\")\n        return False<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 40, 34, 42, 37, 33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backups', os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {src_folder}. Error: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0016131401062011719, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 42, 43, 34, 41, 37, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"{src_folder} does not exist\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {src_folder}. Error: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.004181861877441406, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 40, 33, 34, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"The source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from __future__ import annotations", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00863504409790039, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [34, 43, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004064083099365234, "tests_passed": true, "error": null}}
{"selected_lines": [44, 43, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error deleting source folder:\", str(e))\n        return False", "compilation_passed": true, "time": 0.0011930465698242188, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 34, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 41, 36, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0055370330810546875, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 44, 40, 36, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder does not exist: {src_folder}\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>#!/bin/python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [37, 44, 43, 40, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010612964630126953, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 41, 44, 37, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004111051559448242, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017447710037231445, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 44, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 43, 34, 40, 41, 37, 42, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"An error occurred while deleting the source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.0012679100036621094, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 42, 33, 44, 36, 41, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder '{src_folder}': {str(e)}\")\n        return False<|endoftext|>from __future__ import annotations", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 34, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004090070724487305, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"An error occurred while deleting the source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.003994941711425781, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 41, 40, 44, 36, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'tar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}. Reason: {e}\")\n        return False", "compilation_passed": true, "time": 0.0014181137084960938, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 42, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(\"Error deleting source folder:\", str(e))\n        return False", "compilation_passed": true, "time": 0.00424504280090332, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"The source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.016707181930541992, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 36, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.003915548324584961, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 37, 42, 40, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"The source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 34, 37, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004311084747314453, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 40, 34, 41, 43, 42, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error deleting source folder:\", str(e))\n        return False", "compilation_passed": true, "time": 0.0046520233154296875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 43, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004064083099365234, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}'.\", e)\n        return False", "compilation_passed": true, "time": 0.004363059997558594, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 37, 40, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 37, 33, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'tar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.004788875579833984, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"{src_folder} does not exist\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010149002075195312, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 41, 44, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004774808883666992, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 36, 37, 42, 41, 34, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backups', os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0019497871398925781, "tests_passed": true, "error": null}}
{"selected_lines": [37, 44, 34, 33, 42, 36, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"{src_folder} does not exist\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.move(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0011589527130126953, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 33, 42, 43, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error while deleting source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 34, 33, 44, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f'Error: {str(e)}')\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"{src_folder} is not a directory\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {src_folder}. Error: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.004244327545166016, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backups', os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 37, 43, 40, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f'Error: {e}')\n        return False", "compilation_passed": true, "time": 0.0040950775146484375, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 41, 40, 33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {str(e)}')\n        return False", "compilation_passed": true, "time": 0.004176139831542969, "tests_passed": true, "error": null}}
{"selected_lines": [37, 44, 34, 41, 33, 42, 40, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 41, 37, 33, 36, 34, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.replace('/', '_').replace('\\\\', '_'))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0015010833740234375, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.move(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.006644010543823242, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 36, 33, 43, 37, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder does not exist: {src_folder}\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error deleting source folder:\", str(e))\n        return False", "compilation_passed": true, "time": 0.0015120506286621094, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [43, 40, 34, 36, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 43, 44, 37, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 44, 41, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017447710037231445, "tests_passed": true, "error": null}}
{"selected_lines": [44, 43, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {src_folder}. Error: {str(e)}\")\n        return False<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 37, 41, 42, 43, 44, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0012402534484863281, "tests_passed": true, "error": null}}
{"selected_lines": [33, 43, 34, 37, 36, 40, 42, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'The source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.004106998443603516, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 41, 33, 43, 34, 44, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup_' + os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {src_folder}. Error: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0014300346374511719, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 42, 43, 33, 36, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup_' + os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0016100406646728516, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 41, 44, 42, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 42, 34, 44, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder does not exist: {src_folder}\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 33, 37, 42, 43, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False<|endoftext|>from math import sqrt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.004186868667602539, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0111541748046875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 43, 44, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0041468143463134766, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'tar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.015048980712890625, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 42, 34, 40, 43, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004106044769287109, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42, 43, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.replace('/', '_').replace('\\\\', '_'))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder '{src_folder}': {str(e)}\")\n        return False<|endoftext|>#!/bin/python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013730525970458984, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder does not exist: {src_folder}\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.009935855865478516, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 44, 40, 34, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist: {}'.format(src_folder))\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004601955413818359, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.013241052627563477, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 37, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0011739730834960938, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 33, 43, 34, 36, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {str(e)}')\n        return False", "compilation_passed": true, "time": 0.004891157150268555, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 36, 40, 33, 44, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backups', os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {e}')\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 34, 42, 43, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.00131988525390625, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 44, 43, 42, 37, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup')\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0016112327575683594, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 43, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0020673274993896484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34, 42, 44, 33, 40, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013270378112792969, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 44, 42, 36, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 44, 37, 36, 40, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup_' + os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}. Reason: {e}\")\n        return False", "compilation_passed": true, "time": 0.012420892715454102, "tests_passed": true, "error": null}}
{"selected_lines": [33, 42, 34, 44, 41, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist: {}'.format(src_folder))\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0045168399810791016, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 42, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f'Error while deleting source folder: {e}')\n        return False", "compilation_passed": true, "time": 0.004065990447998047, "tests_passed": true, "error": null}}
{"selected_lines": [33, 43, 36, 41, 42, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup_' + os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0012428760528564453, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 37, 36, 40, 43, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"{src_folder} does not exist\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0038471221923828125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.0039708614349365234, "tests_passed": true, "error": null}}
{"selected_lines": [44, 41, 42, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004117012023925781, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 33, 43, 44, 37, 36, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.001194000244140625, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 37, 33, 44, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}\", file=sys.stderr)\n        return False", "compilation_passed": true, "time": 0.0011491775512695312, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder {src_folder} does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010921001434326172, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 44, 40, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 40, 36, 44, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013470649719238281, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 40, 42, 33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {src_folder}. Error: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.003931999206542969, "tests_passed": true, "error": null}}
{"selected_lines": [43, 44, 34, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004293203353881836, "tests_passed": true, "error": null}}
{"selected_lines": [34, 44, 41, 36, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0055370330810546875, "tests_passed": true, "error": null}}
{"selected_lines": [37, 44, 43, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {str(e)}')\n        return False", "compilation_passed": true, "time": 0.001219034194946289, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 34, 36, 42, 44, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0038869380950927734, "tests_passed": true, "error": null}}
{"selected_lines": [33, 43, 41, 37, 34, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error while deleting source folder: {e}')\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 33, 37, 44, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0011928081512451172, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017447710037231445, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 37, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder \"{src_folder}\" does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.009884834289550781, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 36, 43, 34, 42, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {src_folder}. Error: {str(e)}\")\n        return False<|endoftext|>from math import sqrt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 40, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from math import sqrt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017447710037231445, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 42, 41, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>#!/bin/python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017447710037231445, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 34, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n    # Backup folder\n    backup_folder = f\"{backup_dir}/{os.path.basename(src_folder)}\"\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.016865015029907227, "tests_passed": true, "error": null}}
{"selected_lines": [43, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from math import sqrt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 44, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}\", file=sys.stderr)\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [34, 44, 41, 36, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0055370330810546875, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 34, 36, 42, 44, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0038869380950927734, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 43, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 43, 40, 34, 41, 44, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = f\"{backup_dir}/{os.path.basename(src_folder)}\"\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.005121946334838867, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.017054080963134766, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 43, 40, 37, 33, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 36, 33, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist')\n    # Backup folder\n    backup_folder = f\"{backup_dir}/{os.path.basename(src_folder)}\"\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013871192932128906, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}. Reason: {e}\")\n        return False", "compilation_passed": true, "time": 0.004891157150268555, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010612964630126953, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 41, 44, 37, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder '{src_folder}'.\", e)\n        return False", "compilation_passed": true, "time": 0.004702329635620117, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 34, 33, 36, 41, 37, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 40, 42, 34, 43, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0014188289642333984, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 43, 42, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'The source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00427699089050293, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 40, 44, 36, 37, 34, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 37, 36, 43, 44, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.00127410888671875, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 34, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 42, 33, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.split(os.sep)[-1])\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004250288009643555, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 40, 36, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.replace('/', '_').replace('\\\\', '_'))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0016281604766845703, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 36, 41, 34, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004063129425048828, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0111541748046875, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [43, 44, 40, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 42, 34, 37, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.split(os.sep)[-1])\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001605987548828125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 43, 41, 36, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0042629241943359375, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004090070724487305, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 44, 34, 41, 40, 43, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backups', os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.0016701221466064453, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 40, 37, 42, 43, 44, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder \"{src_folder}\" does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.split(os.sep)[-1])\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(\"Error deleting source folder:\", str(e))\n        return False", "compilation_passed": true, "time": 0.0012068748474121094, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 43, 42, 40, 37, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f'Error: {e}')\n        return False", "compilation_passed": true, "time": 0.003955841064453125, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 34, 36, 44, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {src_folder}. Error: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0012197494506835938, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {e}')\n        return False", "compilation_passed": true, "time": 0.011082172393798828, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 41, 37, 34, 42, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"{src_folder} does not exist\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from math import sqrt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 41, 44, 36, 42, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 36, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.003915548324584961, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 37, 44, 42, 34, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False<|endoftext|>from math import sqrt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.014139890670776367, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"{src_folder} is not a directory\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.009763002395629883, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 34, 41, 36, 43, 44, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error while deleting source folder: {e}')\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 33, 41, 42, 44, 37, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0039691925048828125, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 41, 36, 43, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f'Error while deleting source folder: {e}')\n        return False", "compilation_passed": true, "time": 0.004063129425048828, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 43, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder \"{src_folder}\" does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.004736185073852539, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 37, 36, 43, 44, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.00127410888671875, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 36, 44, 42, 43, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {e}')\n        return False", "compilation_passed": true, "time": 0.0015332698822021484, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 40, 41, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0014147758483886719, "tests_passed": true, "error": null}}
{"selected_lines": [43, 42, 41, 34, 40, 44, 37, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.0013251304626464844, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 44, 36, 42, 34, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013990402221679688, "tests_passed": true, "error": null}}
{"selected_lines": [33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.004788875579833984, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00976419448852539, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.017054080963134766, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 43, 41, 36, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0042629241943359375, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 34, 42, 44, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0040340423583984375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 44, 33, 42, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backups', os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001505136489868164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 44, 36, 41, 42, 37, 43, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = f\"{backup_dir}/{os.path.basename(src_folder)}\"\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}. Reason: {e}\")\n        return False", "compilation_passed": true, "time": 0.0014729499816894531, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 37, 34, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder \"{src_folder}\" does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00401616096496582, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 33, 40, 44, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.0014548301696777344, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00863504409790039, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'tar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.015048980712890625, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 44, 34, 43, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 44, 33, 43, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>#!/bin/python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 44, 34, 37, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.005262136459350586, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0111541748046875, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 43, 40, 41, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 40, 36, 44, 41, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from __future__ import annotations", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 40, 34, 44, 42, 37, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004983186721801758, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 33, 43, 34, 36, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {str(e)}')\n        return False", "compilation_passed": true, "time": 0.004891157150268555, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 37, 42, 43, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}\", file=sys.stderr)\n        return False", "compilation_passed": true, "time": 0.0012099742889404297, "tests_passed": true, "error": null}}
{"selected_lines": [43, 40, 33, 41, 44, 42, 36, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {src_folder}. Error: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0039899349212646484, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.012869119644165039, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 37, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder \"{src_folder}\" does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup')\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013852119445800781, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 41, 43, 42, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.split(os.sep)[-1])\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0040340423583984375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 44, 37, 33, 36, 40, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004106998443603516, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 36, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.003915548324584961, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"{src_folder} does not exist\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010149002075195312, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.split(os.sep)[-1])\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.009901046752929688, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017447710037231445, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 36, 41, 43, 42, 33, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error deleting source folder '{src_folder}': {str(e)}\")\n        return False<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 34, 43, 36, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}'.\", e)\n        return False<|endoftext|>from __future__ import annotations", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 41, 33, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'The source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.003988981246948242, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 34, 37, 36, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 33, 43, 40, 44, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 36, 42, 34, 37, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f'Error: {str(e)}')\n        return False", "compilation_passed": true, "time": 0.0013599395751953125, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 41, 42, 44, 37, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0039691925048828125, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 41, 37, 44, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'The source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0040247440338134766, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 37, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 34, 40, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist: {}'.format(src_folder))\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup')\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>#!/bin/python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 41, 37, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0012137889862060547, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.003979921340942383, "tests_passed": true, "error": null}}
{"selected_lines": [43, 40, 44, 36, 34, 42, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004187345504760742, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 44, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = f\"{backup_dir}/{os.path.basename(src_folder)}\"\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0050661563873291016, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 34, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.003929853439331055, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.012869119644165039, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 44, 41, 42, 40, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = f\"{backup_dir}/{os.path.basename(src_folder)}\"\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013003349304199219, "tests_passed": true, "error": null}}
{"selected_lines": [34, 44, 40, 33, 41, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"The source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.004565000534057617, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 40, 34, 44, 42, 37, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004983186721801758, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017447710037231445, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004090070724487305, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error deleting source folder:\", str(e))\n        return False", "compilation_passed": true, "time": 0.009728193283081055, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.012869119644165039, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error while deleting source folder: {e}')\n        return False", "compilation_passed": true, "time": 0.011346817016601562, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [44, 41, 43, 34, 36, 42, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"An error occurred while deleting the source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.005199909210205078, "tests_passed": true, "error": null}}
{"selected_lines": [43, 44, 37, 36, 41, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"{src_folder} does not exist\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00863504409790039, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 37, 42, 34, 36, 33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error while deleting source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.004018068313598633, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.017054080963134766, "tests_passed": true, "error": null}}
{"selected_lines": [43, 44, 40, 33, 42, 37, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error deleting source folder: {e}\")\n        return False<|endoftext|>#!/bin/python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 36, 40, 33, 42, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f'Error: {str(e)}')\n        return False", "compilation_passed": true, "time": 0.003921031951904297, "tests_passed": true, "error": null}}
{"selected_lines": [33, 44, 42, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}\", file=sys.stderr)\n        return False", "compilation_passed": true, "time": 0.003997087478637695, "tests_passed": true, "error": null}}
{"selected_lines": [33, 44, 42, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}\", file=sys.stderr)\n        return False", "compilation_passed": true, "time": 0.003997087478637695, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 44, 43, 36, 34, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0014731884002685547, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [44, 41, 43, 34, 36, 42, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"An error occurred while deleting the source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.005199909210205078, "tests_passed": true, "error": null}}
{"selected_lines": [44, 43, 36, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.replace('/', '_').replace('\\\\', '_'))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0014357566833496094, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 43, 44, 42, 40, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backups', os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"An error occurred while deleting the source folder:\", e)\n        return False<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backups', os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.007461071014404297, "tests_passed": true, "error": null}}
{"selected_lines": [34, 43, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004064083099365234, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.012869119644165039, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004090070724487305, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.replace('/', '_').replace('\\\\', '_'))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.009279966354370117, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0012547969818115234, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 37, 43, 36, 41, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder '{src_folder}': {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 34, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004090070724487305, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 41, 33, 43, 42, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error while deleting source folder: {e}')\n        return False", "compilation_passed": true, "time": 0.0014929771423339844, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}'.\", e)\n        return False", "compilation_passed": true, "time": 0.01415872573852539, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 43, 41, 37, 33, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.004021883010864258, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [33, 44, 43, 34, 41, 40, 37, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder \"{src_folder}\" does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.split(os.sep)[-1])\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.003983020782470703, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.011132001876831055, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 34, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder does not exist: {src_folder}\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0012009143829345703, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 41, 40, 33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {str(e)}')\n        return False", "compilation_passed": true, "time": 0.004176139831542969, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 34, 43, 36, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder {src_folder} does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004148960113525391, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 37, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 37, 33, 40, 44, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0011959075927734375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 43, 41, 36, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0042629241943359375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 44, 37, 42, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0011639595031738281, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup_' + os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0014150142669677734, "tests_passed": true, "error": null}}
{"selected_lines": [33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.004788875579833984, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 40, 37, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.move(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0010461807250976562, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 42, 34, 44, 43, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(\"Error while deleting source folder:\", e)\n        return False<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 37, 36, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backups', os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013418197631835938, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 34, 36, 37, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 43, 37, 41, 42, 36, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error occurred while deleting the source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.01375579833984375, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backups', os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.007461071014404297, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.010796070098876953, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 33, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004773139953613281, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 36, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}'.\", e)\n        return False", "compilation_passed": true, "time": 0.0013229846954345703, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 41, 43, 36, 42, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"{src_folder} is not a directory\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [34, 43, 41, 36, 37, 44, 42, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"{src_folder} is not a directory\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0012810230255126953, "tests_passed": true, "error": null}}
{"selected_lines": [33, 43, 41, 40, 34, 36, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder '{src_folder}': {str(e)}\")\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 40, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00391387939453125, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 43, 41, 36, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0042629241943359375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42, 37, 33, 34, 40, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004616975784301758, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [44, 43, 41, 33, 34, 40, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 44, 40, 41, 33, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 43, 41, 33, 34, 36, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.split(os.sep)[-1])\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001542806625366211, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 41, 34, 42, 36, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"{src_folder} is not a directory\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017447710037231445, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0014841556549072266, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"An error occurred while deleting the source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.003994941711425781, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 40, 36, 44, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder {src_folder} does not exist.\")\n    # Backup folder\n    backup_folder = f\"{backup_dir}/{os.path.basename(src_folder)}\"\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 41, 34, 36, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {str(e)}')\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 33, 34, 41, 37, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {src_folder}. Error: {str(e)}\")\n        return False<|endoftext|>from __future__ import annotations", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 33, 42, 36, 43, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error deleting source folder: {e}\")\n        return False<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 42, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'tar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error deleting source folder:\", str(e))\n        return False", "compilation_passed": true, "time": 0.0018210411071777344, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.017054080963134766, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 41, 42, 44, 37, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0039691925048828125, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017447710037231445, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0111541748046875, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 43, 41, 42, 33, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f'Error: {e}')\n        return False", "compilation_passed": true, "time": 0.004038095474243164, "tests_passed": true, "error": null}}
{"selected_lines": [43, 40, 44, 36, 42, 37, 41, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error while deleting source folder:\", e)\n        return False<|endoftext|>from __future__ import annotations", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 42, 36, 33, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'tar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 33, 42, 44, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"An error occurred while deleting the source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.004002094268798828, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 40, 36, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup_' + os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0014040470123291016, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 43, 42, 36, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error occurred while deleting the source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0011699199676513672, "tests_passed": true, "error": null}}
{"selected_lines": [43, 42, 34, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.003951072692871094, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 36, 43, 37, 42, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00127410888671875, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 42, 36, 33, 43, 34, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist: {}'.format(src_folder))\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"An error occurred while deleting the source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.003910064697265625, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 37, 41, 43, 33, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"The source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 44, 40, 43, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.split(os.sep)[-1])\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {e}')\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>#!/bin/python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 34, 41, 40, 36, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 44, 33, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backups', os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from math import sqrt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 34, 36, 42, 44, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0038869380950927734, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 33, 36, 44, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 43, 44, 34, 41, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder \"{src_folder}\" does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010782003402709961, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error while deleting source folder: {e}')\n        return False", "compilation_passed": true, "time": 0.011346817016601562, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 44, 42, 33, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 40, 44, 37, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 33, 41, 37, 44, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from math import sqrt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 37, 33, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'tar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001310110092163086, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 43, 42, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup_' + os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.001422882080078125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 43, 41, 36, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0042629241943359375, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 41, 34, 40, 37, 42, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from math import sqrt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 34, 42, 44, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0040340423583984375, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 34, 42, 36, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004014730453491211, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 36, 40, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 44, 40, 36, 33, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.split(os.sep)[-1])\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0037550926208496094, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010966062545776367, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 41, 36, 34, 37, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {src_folder}. Error: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.00146484375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 44, 42, 43, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'The source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting the source folder '{src_folder}': {e}\")\n        return False<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 40, 42, 36, 44, 33, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {src_folder}. Error: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.003971099853515625, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 36, 33, 44, 42, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup_' + os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0011811256408691406, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 40, 44, 41, 33, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004122018814086914, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 34, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004170894622802734, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 41, 37, 33, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0012309551239013672, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 34, 44, 36, 43, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.replace('/', '_').replace('\\\\', '_'))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013203620910644531, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from math import sqrt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 33, 44, 37, 43, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False<|endoftext|>from __future__ import annotations", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 42, 34, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.004956245422363281, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 34, 41, 36, 42, 37, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(\"An error occurred while deleting the source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.0047528743743896484, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00976419448852539, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 42, 44, 34, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"An error occurred while deleting the source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.005143642425537109, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 43, 34, 36, 33, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0012309551239013672, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 40, 37, 36, 44, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0011868476867675781, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 34, 40, 33, 43, 36, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'The source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error while deleting source folder: {e}')\n        return False", "compilation_passed": true, "time": 0.00397801399230957, "tests_passed": true, "error": null}}
{"selected_lines": [44, 33, 43, 41, 40, 37, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.move(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001046895980834961, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error while deleting source folder: {e}')\n        return False", "compilation_passed": true, "time": 0.004971981048583984, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 37, 33, 43, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'The source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.move(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001050710678100586, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 33, 34, 44, 41, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"{src_folder} is not a directory\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004071950912475586, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 36, 44, 34, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'The source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder '{src_folder}'.\", e)\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 44, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 43, 40, 36, 34, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 34, 37, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}. Reason: {e}\")\n        return False", "compilation_passed": true, "time": 0.004014730453491211, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 37, 36, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 44, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 37, 34, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder \"{src_folder}\" does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00401616096496582, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 44, 41, 43, 34, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0014100074768066406, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.011132001876831055, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 44, 42, 43, 40, 34, 41, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.replace('/', '_').replace('\\\\', '_'))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {str(e)}')\n        return False", "compilation_passed": true, "time": 0.001386880874633789, "tests_passed": true, "error": null}}
{"selected_lines": [44, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>#!/bin/python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 37, 42, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.split(os.sep)[-1])\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 40, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backups', os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {e}')\n        return False", "compilation_passed": true, "time": 0.0015180110931396484, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error occurred while deleting the source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.010587215423583984, "tests_passed": true, "error": null}}
{"selected_lines": [34, 44, 40, 33, 41, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"The source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.004565000534057617, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 40, 43, 33, 36, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup_' + os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001360177993774414, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 41, 44, 37, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004111051559448242, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 42, 37, 34, 33, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist: {}'.format(src_folder))\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0014908313751220703, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup_' + os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00789785385131836, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"{src_folder} does not exist\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}. Reason: {e}\")\n        return False", "compilation_passed": true, "time": 0.003993988037109375, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 41, 37, 40, 33, 34, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder \"{src_folder}\" does not exist.')\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"An error occurred while deleting the source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.012869119644165039, "tests_passed": true, "error": null}}
{"selected_lines": [33, 44, 37, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 44, 36, 34, 42, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004187345504760742, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 33, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from math import sqrt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = f\"{backup_dir}/{os.path.basename(src_folder)}\"\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.004024982452392578, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 33, 40, 43, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0015048980712890625, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0053598880767822266, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 33, 43, 34, 41, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {e}')\n        return False", "compilation_passed": true, "time": 0.004891872406005859, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 41, 44, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004774808883666992, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 37, 44, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0011928081512451172, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 34, 43, 41, 44, 36, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}. Reason: {e}\")\n        return False", "compilation_passed": true, "time": 0.0040187835693359375, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00863504409790039, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017447710037231445, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011030912399291992, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 43, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}\", file=sys.stderr)\n        return False", "compilation_passed": true, "time": 0.00397801399230957, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 37, 36, 33, 34, 41, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from __future__ import annotations", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 43, 44, 42, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"The source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error deleting source folder:\", str(e))\n        return False", "compilation_passed": true, "time": 0.004887819290161133, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.012869119644165039, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017447710037231445, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 33, 34, 43, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013289451599121094, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 44, 36, 37, 40, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0012671947479248047, "tests_passed": true, "error": null}}
{"selected_lines": [33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.004788875579833984, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 43, 41, 40, 44, 42, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting the source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.0014989376068115234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 42, 44, 43, 36, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder {src_folder} does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 43, 36, 44, 37, 42, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0111541748046875, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 33, 44, 34, 37, 41, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013937950134277344, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017447710037231445, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 43, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.003961801528930664, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 44, 36, 34, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'The source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.003912210464477539, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 44, 36, 42, 34, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013990402221679688, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 40, 41, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0014147758483886719, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010612964630126953, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 40, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error while deleting source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.0013697147369384766, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {e}')\n        return False", "compilation_passed": true, "time": 0.003923177719116211, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 40, 44, 41, 33, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004122018814086914, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 43, 41, 36, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"The source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"An error occurred while deleting the source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.003882884979248047, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {src_folder}. Error: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.003969907760620117, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 37, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder {src_folder} does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0012087821960449219, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 41, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 34, 43, 36, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder {src_folder} does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004148960113525391, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 34, 43, 37, 36, 41, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = f\"{backup_dir}/{os.path.basename(src_folder)}\"\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f'Error: {e}')\n        return False", "compilation_passed": true, "time": 0.0011930465698242188, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 40, 37, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.move(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0010461807250976562, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 33, 41, 44, 34, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder: {e}\")\n        return False<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 36, 34, 33, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error deleting source folder:\", str(e))\n        return False", "compilation_passed": true, "time": 0.004004716873168945, "tests_passed": true, "error": null}}
{"selected_lines": [44, 43, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error deleting source folder:\", str(e))\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 44, 43, 41, 40, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}'.\", e)\n        return False", "compilation_passed": true, "time": 0.005133152008056641, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 43, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"An error occurred while deleting the source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.004005908966064453, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 42, 33, 36, 40, 43, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backups', os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00128936767578125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 44, 41, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}'.\", e)\n        return False", "compilation_passed": true, "time": 0.0041391849517822266, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 41, 37, 34, 43, 33, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backups', os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}'.\", e)\n        return False", "compilation_passed": true, "time": 0.0015277862548828125, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}. Reason: {e}\")\n        return False", "compilation_passed": true, "time": 0.012420892715454102, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 40, 37, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.move(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0010461807250976562, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 36, 42, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.split(os.sep)[-1])\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}'.\", e)\n        return False", "compilation_passed": true, "time": 0.004823207855224609, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.017054080963134766, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.0039708614349365234, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 44, 42, 36, 41, 33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup')\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(\"An error occurred while deleting the source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.0015532970428466797, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011030912399291992, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 40, 34, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist: {}'.format(src_folder))\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00492095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 41, 33, 44, 34, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error deleting source folder:\", str(e))\n        return False", "compilation_passed": true, "time": 0.0013210773468017578, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 36, 44, 43, 41, 42, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.004065036773681641, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 42, 43, 41, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 33, 41, 40, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 33, 41, 40, 37, 44, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 41, 37, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}. Reason: {e}\")\n        return False", "compilation_passed": true, "time": 0.004891157150268555, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 42, 41, 36, 43, 37, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error occurred while deleting the source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0013418197631835938, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 34, 36, 42, 40, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"{src_folder} does not exist\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 36, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 33, 37, 43, 42, 40, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backups', os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}. Reason: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013260841369628906, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 37, 43, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder does not exist: {src_folder}\")\n    # Backup folder\n    backup_folder = f\"{backup_dir}/{os.path.basename(src_folder)}\"\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0038919448852539062, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 36, 42, 43, 34, 44], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'tar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting the source folder: {e}\")\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist: {}'.format(src_folder))\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}'.\", e)\n        return False", "compilation_passed": true, "time": 0.0038340091705322266, "tests_passed": true, "error": null}}
{"selected_lines": [43, 42, 34, 37, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}. Reason: {e}\")\n        return False", "compilation_passed": true, "time": 0.004014730453491211, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 33, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from math import sqrt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 34, 42, 43, 37, 33, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.move(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.0011568069458007812, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 44, 36, 43, 41, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False<|endoftext|>from math import sqrt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 41, 43, 36, 37, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder \"{src_folder}\" does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder '{src_folder}': {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0012631416320800781, "tests_passed": true, "error": null}}
{"selected_lines": [43, 44, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error while deleting source folder: {e}')\n        return False<|endoftext|>from __future__ import annotations", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 34, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004090070724487305, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 36, 33, 37, 44, 40, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004465818405151367, "tests_passed": true, "error": null}}
{"selected_lines": [33, 44, 36, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, 'backup')\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013549327850341797, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 43, 44, 42, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"The source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error deleting source folder:\", str(e))\n        return False", "compilation_passed": true, "time": 0.004887819290161133, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error deleting source folder:\", str(e))\n        return False", "compilation_passed": true, "time": 0.009728193283081055, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 34, 36, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 44, 33, 34, 43, 41], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.003965854644775391, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 33, 41, 36, 34, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder, dirs_exist_ok=True)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.005401134490966797, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0053598880767822266, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder {src_folder} does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.015743017196655273, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 33, 41, 42, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.003920793533325195, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 37, 36, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = backup_dir\n    shutil.move(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010966062545776367, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 37, 44, 43, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'Source folder \"{src_folder}\" does not exist.')\n    # Backup folder\n    backup_folder = f\"{backup_dir}/{os.path.basename(src_folder)}\"\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error occurred while deleting the source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0039768218994140625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 44, 37, 42, 34, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(\"Error deleting source folder:\", str(e))\n        return False", "compilation_passed": true, "time": 0.0011858940124511719, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 37, 44, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0011928081512451172, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 40, 44, 36, 33, 34, 37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"{src_folder} is not a directory\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004899740219116211, "tests_passed": true, "error": null}}
{"selected_lines": [36, 44, 34, 37, 43, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f'Error: {str(e)}')\n        return False", "compilation_passed": true, "time": 0.004840850830078125, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.001416921615600586, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010966062545776367, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004090070724487305, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 44, 41, 43, 34, 36], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0014100074768066406, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.017663002014160156, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 36, 34, 40, 33, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = f\"{backup_dir}/{os.path.basename(src_folder)}\"\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder '{src_folder}': {e}\")\n        return False", "compilation_passed": true, "time": 0.004526853561401367, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00863504409790039, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 44, 33, 43, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Failed to delete source folder: {src_folder}\", file=sys.stderr)\n        return False", "compilation_passed": true, "time": 0.00133514404296875, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.011662006378173828, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 40, 42, 34], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"The source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.004075050354003906, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 44, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder \"{src_folder}\" does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False<|endoftext|>from .. import os, shutil", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 41, 44, 37, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004111051559448242, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 41, 44, 37, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004111051559448242, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.010946273803710938, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 44, 37, 43, 42, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist: {}'.format(src_folder))\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'gztar', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0013899803161621094, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 41, 44, 37, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.004111051559448242, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 40, 34, 43], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('Source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.004419803619384766, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 33, 41, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = f\"{backup_dir}/{os.path.basename(src_folder)}\"\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00119781494140625, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 43, 36, 40, 42], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError('The source folder does not exist.')\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, src_folder.replace('/', '_').replace('\\\\', '_'))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0014090538024902344, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 40, 43, 34, 36, 33], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"{src_folder} is not a directory\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(\"Error while deleting source folder:\", e)\n        return False", "compilation_passed": true, "time": 0.003919124603271484, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 37, 44, 40], "result": {"code": "import os\nimport shutil\n\n\ndef task_func(src_folder, backup_dir):\n    \"\"\"\n    Backs up a given source folder to the specified backup directory, then deletes the source folder.\n    \n    Parameters:\n    src_folder (str): The path of the source folder to be backed up and deleted.\n    backup_dir (str): The path of the directory where the source folder will be backed up.\n    \n    Returns:\n    bool: True if the operation is successful, False otherwise.\n    \n    Requirements:\n    - os\n    - shutil\n    \n    Raises:\n    - ValueError: If the source folder does not exist.\n    - Exception: If an error occurs while deleting the source folder.\n    \n    Example:\n    >>> import tempfile\n    >>> src_folder = tempfile.mkdtemp()\n    >>> backup_dir = tempfile.mkdtemp()\n    >>> with open(os.path.join(src_folder, 'sample.txt'), 'w') as f:\n    ...     _ = f.write('This is a sample file.')\n    >>> task_func(src_folder, backup_dir)\n    True\n    \"\"\"\n    # Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Backup folder\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.make_archive(backup_folder, 'zip', src_folder)\n    # Delete source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0011928081512451172, "tests_passed": true, "error": null}}
