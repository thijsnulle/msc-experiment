{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [34, 37, 30, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import time", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01262807846069336, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 37, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 37, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import functools", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import functools", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import functools", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01262807846069336, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=list(columns))\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013401985168457031, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01262807846069336, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import time", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import functools", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from functools import wraps", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30, 37, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from functools import wraps", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 30, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 30, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.005515098571777344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01262807846069336, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01262807846069336, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 32, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import time", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30, 37, 34, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 34, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 30, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.004269599914550781, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import functools", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 32, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import functools", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01262807846069336, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 37, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 34, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import time", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=list(columns))\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013401985168457031, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 37, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 30, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import time", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 32, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from pandas import Series, DataFrame", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01262807846069336, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 34, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import time", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from functools import wraps", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01262807846069336, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import functools", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 37, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 37, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=list(columns))\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013401985168457031, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 36, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 37, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01262807846069336, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 30, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01262807846069336, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 34, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 34, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from functools import wraps", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 36, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy<|endoftext|>from pandas import Series, DataFrame", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from pandas import Series, DataFrame", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 30, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.005515098571777344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 30, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.005515098571777344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 30, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 32, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy<|endoftext|>import functools", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import functools", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.003854036331176758, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30, 34, 36, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from functools import wraps", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 36, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.004269599914550781, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 34, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import functools", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.003805875778198242, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from functools import wraps", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37, 34, 36, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 32, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import time", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from pandas import Series, DataFrame", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 37, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 34, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 34, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import time", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [36, 30, 32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from functools import wraps", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32, 36, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from pandas import Series, DataFrame", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 32, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import time", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=list(columns))\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013401985168457031, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 37, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [37, 36, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 37, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 32, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import functools", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from functools import wraps", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import functools", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 37, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import functools", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy<|endoftext|>import functools", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 37, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from functools import wraps", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 37, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=list(columns))\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013401985168457031, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import functools", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01262807846069336, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [34, 30, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.004269599914550781, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from pandas import Series, DataFrame", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01262807846069336, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01262807846069336, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 32, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import functools", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 34, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from pandas import Series, DataFrame", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 36, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.005254983901977539, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 34, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import time", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import time", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 34, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [36, 37, 34, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 34, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 30, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import time", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 30, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from functools import wraps", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=list(columns))\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01262807846069336, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.004269599914550781, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01262807846069336, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=list(columns))\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.004210233688354492, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 30, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 32, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01262807846069336, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 34, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01262807846069336, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=list(columns))\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01262807846069336, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 34, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=list(columns))\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013401985168457031, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import time", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=list(columns))\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import functools", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 34, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import functools", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01262807846069336, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 32, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from pandas import Series, DataFrame", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 37, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import time", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 30, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from functools import wraps", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 37, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from pandas import Series, DataFrame", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from functools import wraps", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from functools import wraps", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 30, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 30, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.004269599914550781, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import time", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 36, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 36, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 34, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import time", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 34, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from pandas import Series, DataFrame", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import time", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 37, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy<|endoftext|>import functools", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from pandas import Series, DataFrame", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 36, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.005247831344604492, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=list(columns))\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013401985168457031, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from functools import wraps", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 34, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from pandas import Series, DataFrame", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import functools", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 30, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.005515098571777344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013518095016479492, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 37, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy<|endoftext|>import time", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 34, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 37, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01351308822631836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 34, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 30, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 30, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import time", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 34, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import functools", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=list(columns))\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013401985168457031, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 36, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from pandas import Series, DataFrame", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 36, 30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy", "compilation_passed": true, "time": 0.005254983901977539, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 36, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df[columns])\n    return df_copy<|endoftext|>import time", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 34, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>import time", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=list(columns))\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013401985168457031, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [30, 37, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 37, 36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01262807846069336, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data=data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.013650894165039062, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 32, 37], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame.from_dict(data, orient='index')\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python3", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 37, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>from pandas import Series, DataFrame", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 34, 32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 30, 34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df[columns].copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.01262807846069336, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data, columns=columns)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.016008853912353516, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns].values.reshape(-1, 1))\n    return df_copy", "compilation_passed": true, "time": 0.00800323486328125, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32], "result": {"code": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\ndef task_func(data, columns):\n    \"\"\"\n    Normalizes specified columns of a DataFrame using min-max scaling.\n\n    Parameters:\n    data (dict): A dictionary where keys are column names and values are lists of values.\n    columns (list of str): A list of column names to be normalized.\n\n    Returns:\n    pandas.DataFrame: A new DataFrame with the specified columns normalized between 0 and 1.\n\n    Requirements:\n    - pandas\n    - sklearn.preprocessing\n\n    Constants:\n    - A MinMaxScaler object from sklearn.preprocessing is used internally for scaling.\n\n    Example:\n    >>> data = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n    >>> normalized_df = task_func(data, ['a', 'b'])\n    >>> print(normalized_df)\n         a    b\n    0  0.0  0.0\n    1  0.5  0.5\n    2  1.0  1.0\n    \"\"\"\n    df = pd.DataFrame(data)\n    # Create a local MinMaxScaler object\n    scaler = MinMaxScaler()\n    # Create a copy of the DataFrame to avoid modifying the original DataFrame\n    df_copy = df.copy()\n    # Normalize the specified columns\n    df_copy[columns] = scaler.fit_transform(df_copy[columns])\n    return df_copy", "compilation_passed": true, "time": 0.014814138412475586, "tests_passed": true, "error": null}}
