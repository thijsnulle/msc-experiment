{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.0001087188720703125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 37, 32, 39, 35, 36, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": false, "time": 0.00016117095947265625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 36, 33, 34, 37, 32, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 38, 35, 39, 34, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.003690958023071289, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": false, "time": 0.0001590251922607422, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32, 39, 36, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open() as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 36, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": false, "time": 0.0001590251922607422, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002027750015258789, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002179861068725586, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 37, 36, 40, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 33, 35, 39, 32, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode('ASCII')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023107528686523438, "tests_passed": true, "error": null}}
{"selected_lines": [32, 40, 35, 37, 34, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 38, 35, 32, 33, 36, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 33, 40, 32, 39, 36, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002238035202026367, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode('ASCII')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0021660327911376953, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002209186553955078, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010769367218017578, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32, 37, 39, 35, 38, 34, 40, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 36, 33, 34, 38, 32, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode(\"ASCII\")\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": false, "time": 0.0001590251922607422, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33, 40, 35, 37, 36, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_filename(file_path.name)\n            with file_path.open() as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file() and file_path.suffix in ['.txt', '.TXT', '.xml', '.XML']:\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002015829086303711, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 34, 37, 40, 32, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 36, 32, 38, 33, 37, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022399425506591797, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 40, 38, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 38, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode(\"ASCII\")\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0025331974029541016, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 32, 38, 35, 40, 33, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002402782440185547, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 34, 36, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open(mode='rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010340213775634766, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 38, 40, 32, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with file_path.open('rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 36, 33, 35, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file() and file_path.suffix in ['.txt', '.TXT', '.xml', '.XML']:\n            normalized_file_name = file_path.stem.encode(\"ASCII\", \"ignore\").decode(\"utf8\")\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 36, 34, 40, 39, 38, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 38, 39, 36, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with file_path.open() as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.0001087188720703125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 32, 36, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open('rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010769367218017578, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [37, 34, 33, 35, 39, 32, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode('ASCII')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023107528686523438, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 33, 35, 40, 34, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023109912872314453, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34, 38, 40, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024161338806152344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 35, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"**/*\"):\n        if file_path.is_file():\n            normalized_file_name = os.path.basename(file_path).translate(None, os.sep + os.altsep).replace(os.sep + os.altsep, os.altsep)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002027750015258789, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": false, "time": 0.00016117095947265625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 38, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 36, 40, 37, 34, 38, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'r') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 35, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 40, 34, 33, 32, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*.*'):  # get all the files in the directory\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024292469024658203, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 36, 33, 37, 32, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*.*'):  # get all the files in the directory\n        if file_path.is_file():\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 33, 38, 34, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('**/*'):\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002240896224975586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 32, 35, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 35, 33, 36, 38, 40, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": false, "time": 0.0001590251922607422, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 35, 38, 32, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file() and not file_path.name.startswith('.'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0020580291748046875, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010590553283691406, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32, 39, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open(\"rb\") as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002113819122314453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 35, 32, 34, 37, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 34, 33, 39, 38, 32, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 40, 34, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, \"rb\") as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.00011277198791503906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii',\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.00010323524475097656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file() and not file_path.name.startswith('.'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022499561309814453, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 32, 39, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": false, "time": 0.0001590251922607422, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [39, 32, 33, 34, 40, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path),\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open('rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002360105514526367, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 38, 33, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*.txt\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 34, 35, 38, 36, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = file_path.name.encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 32, 34, 35, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with file_path.open() as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 40, 32, 39, 33, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 38, 33, 37, 35, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file() and not file_path.name.startswith('.'):\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 35, 40, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.encode('ascii', 'ignore').decode()\n            with file_path.open() as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 37, 36, 33, 40, 39, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_filename(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 35, 32, 40, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_filename(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.stem.encode(\"ASCII\", \"ignore\").decode(\"utf8\")\n            with file_path.open('rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 34, 39, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii','ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0020868778228759766, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 36, 39, 32, 35, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with file_path.open(\"rb\") as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 39, 37, 36, 40, 34, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 35, 33, 32, 40, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode(\"ASCII\")\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022978782653808594, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0020949840545654297, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34, 39, 32, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002101898193359375, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010340213775634766, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [38, 37, 39, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 32, 35, 33, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 33, 36, 32, 34, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path),\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 40, 32, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0009469985961914062, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36, 32, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024161338806152344, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002275705337524414, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 36, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file() and file_path.suffix in ['.txt', '.TXT', '.xml', '.XML']:\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 36, 37, 35, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii','ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 37, 39, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file() and file_path.suffix in ['.txt', '.TXT', '.xml', '.XML']:\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0020751953125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024161338806152344, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 39, 36, 40, 35, 37, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file() and file_path.suffix in ['.txt', '.TXT', '.xml', '.XML']:\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 33, 40, 32, 36, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file_obj:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 32, 39, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 33, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 38, 32, 39, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path),\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022978782653808594, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 38, 35, 39, 34, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.003690958023071289, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii',\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.00010323524475097656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32, 34, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0019719600677490234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 39, 37, 33, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('**/*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022318363189697266, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 32, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0020868778228759766, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 32, 33, 35, 39, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('**/*'):\n        if not file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": false, "time": 0.00016117095947265625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii','ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002203226089477539, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 32, 39, 37, 33, 36, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open() as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 39, 38, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_filename(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0009620189666748047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*.*'):  # get all the files in the directory\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024292469024658203, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 34, 37, 32, 35, 33, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).glob(\"**/*\"):\n        if file_path.is_file() and file_path.suffix in ['.txt', '.TXT', '.xml', '.XML']:\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).glob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002043008804321289, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 37, 40, 38, 32, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode(\"ASCII\")\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023491382598876953, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 39, 36, 40, 33, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with file_path.open(\"rb\") as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010340213775634766, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 40, 33, 32, 38, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002238035202026367, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 39, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': len(file_content), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with file_path.open() as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 35, 39, 34, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002185821533203125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 40, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': len(file_content), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0019698143005371094, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 36, 33, 34, 32, 38, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 38, 32, 35, 34, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode(\"ASCII\")\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0019609928131103516, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36, 34, 37, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file() and not file_path.name.startswith('.'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode('ASCII')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002187967300415039, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": false, "time": 0.0001590251922607422, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [39, 33, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': len(file_content), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.00263214111328125, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 36, 39, 32, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 37, 39, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('**/*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0025522708892822266, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010590553283691406, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [40, 37, 35, 36, 33, 32, 34, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002597808837890625, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 32, 37, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 39, 33, 32, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"**/*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, \"rb\") as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.0001087188720703125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 36, 33, 35, 32, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode(\"ASCII\")\n            with file_path.open() as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 37, 35, 39, 38, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open('rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002092123031616211, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 34, 39, 33, 38, 40, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'r') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.stem).encode('ASCII', 'ignore').decode()\n            with file_path.open('rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 38, 36, 39, 32, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002279996871948242, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": false, "time": 0.00016117095947265625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 32, 35, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii',\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'r') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010578632354736328, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 32, 39, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('**/*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open() as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002416849136352539, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": false, "time": 0.00016117095947265625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010340213775634766, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 40, 39, 32, 33, 37, 36, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode('ASCII')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002108335494995117, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 37, 39, 35, 34, 38, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open('rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002416849136352539, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 32, 40, 33, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 37, 36, 39, 33, 35, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*.*'):  # get all the files in the directory\n        if file_path.is_file():\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010340213775634766, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii','ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002203226089477539, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010340213775634766, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 36, 40, 33, 35, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 37, 38, 33, 35, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37, 35, 40, 39, 33, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii','ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002238035202026367, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023038387298583984, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022978782653808594, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 36, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii',\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open() as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010502338409423828, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [40, 39, 35, 33, 36, 38, 34, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 40, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 34, 40, 32, 39, 33, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.stem).encode('ASCII', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 33, 35, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = normalize_filename(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 37, 33, 36, 34, 40, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002271890640258789, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 37, 35, 32, 40, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_filename(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii',\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.00010323524475097656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33, 37, 40, 34, 35, 39, 32, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002725839614868164, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 33, 32, 35, 40, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"**/*\"):\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": false, "time": 0.0001590251922607422, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 35, 37, 32, 33, 39, 40, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002640247344970703, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 38, 39, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 37, 39, 35, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.stem.encode(\"ASCII\", \"ignore\").decode(\"utf8\")\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024161338806152344, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 37, 34, 36, 38, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = file_path.name.encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 36, 37, 39, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 40, 34, 37, 39, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'r') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": false, "time": 0.00016117095947265625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [40, 39, 36, 37, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii','ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 38, 37, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 33, 40, 35, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33, 39, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002385854721069336, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('**/*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0025522708892822266, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 37, 36, 34, 40, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_filename(file_path.name)\n            with open(file_path, 'r') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path),\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 32, 33, 36, 37, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.replace(\n            with file_path.open(\"rb\") as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 32, 35, 39, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with file_path.open('rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 33, 32, 40, 34, 35, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'r') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 33, 40, 36, 38, 34, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open('rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0021209716796875, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002179861068725586, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": false, "time": 0.0001590251922607422, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [39, 36, 40, 32, 34, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.001953125, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010769367218017578, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023348331451416016, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002279996871948242, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file_obj:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.001051187515258789, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 36, 40, 33, 37, 39, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in os.listdir(directory):\n        if file_path.is_file() and file_path.suffix in ['.txt', '.TXT', '.xml', '.XML']:\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 35, 37, 38, 34, 32, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0020580291748046875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 33, 34, 36, 37, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002001047134399414, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 34, 40, 33, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 34, 33, 38, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 39, 40, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"**/*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path),\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 40, 36, 35, 32, 37, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 38, 32, 36, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob('*'):\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 33, 32, 39, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": false, "time": 0.00016117095947265625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 39, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open(\"rb\") as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002113819122314453, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34, 33, 39, 35, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*.*'):  # get all the files in the directory\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002271890640258789, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = os.path.basename(file_path).translate(None, os.sep + os.altsep).replace(os.sep + os.altsep, os.altsep)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [38, 34, 35, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file_obj:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": false, "time": 0.0001590251922607422, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010590553283691406, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0020689964294433594, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 35, 39, 37, 40, 34, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 33, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open() as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode(\"ASCII\")\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023491382598876953, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010590553283691406, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 34, 39, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii','ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0020868778228759766, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 37, 38, 36, 33, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.00011277198791503906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [40, 33, 36, 34, 38, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.stem).encode('ASCII', 'ignore').decode()\n            with file_path.open('rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 37, 34, 35, 32, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 38, 40, 36, 35, 32, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('**/*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0025522708892822266, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 36, 35, 40, 32, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file() and file_path.suffix in ['.txt', '.TXT', '.xml', '.XML']:\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii',\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002209186553955078, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.0001087188720703125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 36, 33, 39, 40, 32, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024161338806152344, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 37, 35, 38, 40, 33, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii','ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024161338806152344, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002027750015258789, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 32, 37, 38, 35, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 35, 37, 38, 34, 32, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0020580291748046875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 40, 38, 32, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022978782653808594, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 36, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33, 39, 40, 32, 37, 36, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'r') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 39, 37, 34, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode('ASCII')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 34, 35, 36, 32, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file() and file_path.suffix in ['.txt', '.TXT', '.xml', '.XML']:\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 37, 35, 36, 32, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, \"rb\") as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 36, 33, 35, 34, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"**/*\"):\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'r') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 38, 40, 33, 35, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = file_path.stem.encode(\"ASCII\", \"ignore\").decode(\"utf8\")\n            with file_path.open(\"rb\") as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 40, 36, 35, 34, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file() and not file_path.name.startswith('.'):\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 34, 36, 39, 37, 40, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file() and not file_path.name.startswith('.'):\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022978782653808594, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 38, 39, 36, 37, 32, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open(mode='rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0026979446411132812, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024161338806152344, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 40, 37, 36, 33, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023348331451416016, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 33, 34, 38, 36, 37, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 32, 37, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii','ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002008199691772461, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38, 40, 35, 32, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*.*'):  # get all the files in the directory\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 38, 37, 39, 34, 40, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*.*'):  # get all the files in the directory\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode(\"ASCII\")\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023348331451416016, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 35, 38, 32, 33, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0019440650939941406, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 33, 36, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file_obj:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 38, 32, 36, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"**/*\"):\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023348331451416016, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010340213775634766, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 33, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0009522438049316406, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [39, 37, 33, 38, 40, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'r') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 38, 35, 33, 34, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 32, 39, 38, 35, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 33, 38, 35, 36, 34, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode('ASCII')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 37, 34, 35, 38, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 40, 35, 36, 37, 39, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = normalize_filename(file_path.name)\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 39, 32, 34, 35, 33, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 36, 34, 38, 39, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002222776412963867, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, \"rb\") as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010259151458740234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": false, "time": 0.0001590251922607422, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002275705337524414, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': len(file_content), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022001266479492188, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 40, 34, 32, 38, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002112150192260742, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002482175827026367, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 38, 34, 35, 37, 33, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).glob(\"**/*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024487972259521484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 37, 36, 35, 40, 39, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with file_path.open('rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 36, 32, 39, 37, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022978782653808594, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 37, 32, 39, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).glob(\"**/*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022351741790771484, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": false, "time": 0.00016117095947265625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*.*'):  # get all the files in the directory\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024292469024658203, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii',\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.00010323524475097656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 32, 36, 38, 39, 35, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii','ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022079944610595703, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 34, 36, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'r') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.00011277198791503906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 33, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('**/*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii',\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 32, 33, 40, 35, 34, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 33, 34, 38, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 35, 38, 39, 37, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with file_path.open() as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": false, "time": 0.0001590251922607422, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32, 33, 35, 38, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open() as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023038387298583984, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 35, 32, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"**/*\"):\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 37, 34, 38, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = file_path.name.encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 40, 36, 35, 34, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': len(file_content), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.0001087188720703125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 39, 34, 35, 38, 40, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path),\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 33, 38, 39, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*.txt\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 38, 40, 32, 37, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002238035202026367, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0009469985961914062, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 39, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 37, 35, 39, 33, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_filename(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path),\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 32, 40, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii',\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002275705337524414, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 39, 34, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 35, 39, 34, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002185821533203125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 40, 33, 37, 39, 38, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 38, 35, 39, 34, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.003690958023071289, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 36, 37, 32, 33, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = os.path.basename(file_path).translate(None, os.sep + os.altsep).replace(os.sep + os.altsep, os.altsep)\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 33, 37, 36, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 34, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 33, 38, 39, 40, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 40, 37, 36, 33, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 32, 39, 36, 34, 33, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002260923385620117, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 40, 33, 39, 35, 37, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file() and not file_path.name.startswith('.'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'r') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 33, 36, 37, 34, 40, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as file_obj:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 40, 38, 32, 39, 36, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.stem.encode(\"ASCII\", \"ignore\").decode(\"utf8\")\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 32, 39, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 37, 39, 36, 33, 34, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file() and not file_path.name.startswith('.'):\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, \"rb\") as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open() as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010502338409423828, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35, 34, 38, 37, 36, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with file_path.open(\"rb\") as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 40, 35, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii','ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0021669864654541016, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"**/*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023040771484375, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 37, 32, 39, 34, 33, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022907257080078125, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": false, "time": 0.00016117095947265625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 37, 33, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 35, 33, 32, 34, 38, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('**/*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 36, 32, 39, 38, 34, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open('rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [40, 33, 39, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0025658607482910156, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 36, 32, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011751651763916016, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002275705337524414, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002027750015258789, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open('rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0029549598693847656, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 33, 38, 40, 32, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 32, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*.*'):  # get all the files in the directory\n        if file_path.is_file():\n            normalized_file_name = os.path.basename(file_path).translate(None, os.sep + os.altsep).replace(os.sep + os.altsep, os.altsep)\n            with open(file_path, 'r') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0009469985961914062, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 40, 36, 38, 39, 32, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 39, 36, 33, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [40, 32, 38, 36, 37, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii','ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0025069713592529297, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 37, 36, 38, 34, 33, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010340213775634766, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.0001087188720703125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 34, 40, 39, 33, 32, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file() and file_path.suffix in ['.txt', '.TXT', '.xml', '.XML']:\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 39, 33, 38, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 39, 32, 36, 35, 37, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode(\"ASCII\")\n            with open(file_path, \"rb\") as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 32, 36, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002329111099243164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 35, 40, 38, 36, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33, 39, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open(mode='rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022063255310058594, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 39, 32, 33, 40, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002565145492553711, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 33, 35, 36, 39, 40, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.stem).encode('ASCII', 'ignore').decode()\n            with file_path.open(\"rb\") as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010340213775634766, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('**/*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0025522708892822266, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.0001087188720703125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32, 34, 35, 37, 38, 40, 39, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = file_path.stem.encode(\"ASCII\", \"ignore\").decode(\"utf8\")\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 40, 39, 33, 37, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 35, 40, 38, 33, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii','ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path),\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002416849136352539, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 40, 36, 39, 33, 35, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.stem.encode(\"ASCII\", \"ignore\").decode(\"utf8\")\n            with file_path.open() as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 39, 33, 40, 36, 32, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023937225341796875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002482175827026367, "tests_passed": true, "error": null}}
{"selected_lines": [39, 33, 34, 37, 35, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if file_path.is_file() and not file_path.name.startswith('.'):\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path),\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 39, 36, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('**/*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode(\"ASCII\")\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002852201461791992, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010769367218017578, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0020689964294433594, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0025331974029541016, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 37, 35, 39, 38, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode()\n            with open(file_path, 'rb') as file_obj:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 32, 37, 36, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with file_path.open() as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 39, 38, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('**/*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002238035202026367, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 35, 39, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0009469985961914062, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 40, 36, 32, 33, 37, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file() and file_path.suffix in ['.txt', '.TXT', '.xml', '.XML']:\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": false, "time": 0.00016117095947265625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010590553283691406, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [40, 39, 33, 38, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0009522438049316406, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [39, 33, 38, 36, 34, 32, 40, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob(\"*.txt\"):\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002238035202026367, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 34, 35, 38, 32, 39, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 32, 37, 36, 39, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': len(file_content), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open('rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 38, 33, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010340213775634766, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36, 38, 35, 39, 32, 34, 40, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file() and not file_path.name.startswith('.'):\n            normalized_file_name = normalize_filename(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = os.path.basename(file_path).translate(None, os.sep + os.altsep).replace(os.sep + os.altsep, os.altsep)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 36, 33, 39, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*.txt\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'r') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 35, 32, 37, 34, 36, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022051334381103516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 33, 40, 38, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 35, 33, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.stem).encode('ASCII', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 35, 36, 34, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 40, 33, 34, 35, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with file_path.open(\"rb\") as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 40, 39, 33, 36, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('**/*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open('rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022687911987304688, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023348331451416016, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 34, 38, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_filename(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 37, 40, 34, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002331972122192383, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 38, 32, 33, 35, 36, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.stem).encode('ASCII', 'ignore').decode()\n            with open(file_path, 'r') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path),\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 40, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 40, 34, 38, 39, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii',\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 40, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022978782653808594, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36, 39, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 32, 34, 38, 36, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = os.path.basename(file_path).translate(None, os.sep + os.altsep).replace(os.sep + os.altsep, os.altsep)\n            with open(file_path, 'r') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 36, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002482175827026367, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 40, 34, 37, 38, 32, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = file_path.stem.encode(\"ASCII\", \"ignore\").decode(\"utf8\")\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 32, 39, 38, 34, 33, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 40, 36, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 38, 33, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii',\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 32, 35, 33, 38, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 32, 37, 39, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023407936096191406, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 32, 36, 39, 33, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file() and file_path.suffix in ['.txt', '.TXT', '.xml', '.XML']:\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 39, 32, 40, 35, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 35, 37, 33, 38, 36, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as file_obj:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 32, 34, 35, 40, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 36, 34, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open() as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 39, 37, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': len(file_content), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0026009082794189453, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010340213775634766, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.0001087188720703125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [39, 40, 35, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 32, 37, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 38, 35, 36, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 37, 33, 38, 35, 39, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002027750015258789, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 40, 33, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.stem.encode(\"ASCII\", \"ignore\").decode(\"utf8\")\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 39, 35, 37, 33, 32, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024161338806152344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.00011277198791503906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open('rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002360105514526367, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 36, 38, 32, 35, 34, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_filename(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0009620189666748047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 40, 36, 32, 33, 38, 34, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode(\"ASCII\")\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023491382598876953, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 32, 39, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file() and not file_path.name.startswith('.'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022499561309814453, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002371072769165039, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 32, 35, 37, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii',\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 34, 33, 35, 38, 32, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode(\"ASCII\")\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 38, 35, 33, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*.txt\"):\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [40, 39, 38, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.0001087188720703125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [37, 32, 40, 33, 39, 34, 36, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002279996871948242, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 34, 39, 37, 36, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*.txt\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'r') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 37, 38, 35, 39, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if not file_path.is_file():\n            normalized_file_name = file_path.name.encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022978782653808594, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 37, 35, 33, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 40, 36, 34, 33, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*.txt\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode('ASCII')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022139549255371094, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 36, 32, 40, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0025489330291748047, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0020689964294433594, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010590553283691406, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [38, 33, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"**/*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 34, 38, 39, 36, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = os.path.basename(file_path).translate(None, os.sep + os.altsep).replace(os.sep + os.altsep, os.altsep)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [40, 38, 36, 32, 39, 37, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 36, 37, 33, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('**/*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open(mode='rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0029518604278564453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 36, 33, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"**/*\"):\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': len(file_content), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 34, 39, 32, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file() and not file_path.name.startswith('.'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode('ASCII')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0020971298217773438, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 39, 35, 33, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii','ignore').decode()\n            with file_path.open('rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, \"rb\") as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010259151458740234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*.txt\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file_obj:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 40, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open(mode='rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 32, 35, 38, 33, 37, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.stem.encode(\"ASCII\", \"ignore\").decode(\"utf8\")\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 33, 39, 36, 38, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_filename(file_path.name)\n            with open(file_path, \"rb\") as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": false, "time": 0.00016117095947265625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36, 38, 35, 39, 40, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file_obj:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": false, "time": 0.00016117095947265625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32, 35, 38, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii',\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 38, 34, 37, 36, 35, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = normalize_filename(file_path.name)\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 37, 39, 35, 36, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 38, 33, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open('rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 33, 37, 40, 34, 39, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = os.path.basename(file_path).translate(None, os.sep + os.altsep).replace(os.sep + os.altsep, os.altsep)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002179861068725586, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 34, 33, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('**/*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii',\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = os.path.basename(file_path).translate(None, os.sep + os.altsep).replace(os.sep + os.altsep, os.altsep)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 37, 32, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': len(file_content), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.0001087188720703125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002238035202026367, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file() and not file_path.name.startswith('.'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022361278533935547, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022978782653808594, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, \"rb\") as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010259151458740234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [40, 32, 36, 33, 39, 37, 38, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 36, 40, 33, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, \"rb\") as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 32, 38, 39, 34, 35, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 36, 40, 34, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file() and not file_path.name.startswith('.'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0020341873168945312, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0020949840545654297, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 32, 35, 34, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022857189178466797, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 37, 36, 39, 33, 34, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open(mode='rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 35, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*.txt\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii','ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002416849136352539, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 34, 37, 38, 32, 40, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open('rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 35, 36, 32, 38, 34, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path),\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 36, 32, 34, 33, 40, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 37, 33, 40, 36, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file_obj:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 38, 35, 36, 37, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 39, 32, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 37, 36, 32, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 39, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode('ASCII')\n            with file_path.open() as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 40, 39, 36, 32, 37, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = file_path.stem.encode(\"ASCII\", \"ignore\").decode(\"utf8\")\n            with open(file_path, 'r') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010340213775634766, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 37, 39, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii',\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [40, 35, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = os.path.basename(file_path).translate(None, os.sep + os.altsep).replace(os.sep + os.altsep, os.altsep)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 32, 36, 34, 35, 37, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii',\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open() as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010502338409423828, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 37, 38, 40, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 33, 39, 32, 38, 35, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in os.listdir(directory):\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 34, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*.txt\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open('rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002360820770263672, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 35, 34, 32, 33, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 32, 33, 34, 39, 38, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = file_path.stem.encode(\"ASCII\", \"ignore\").decode(\"utf8\")\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 37, 38, 36, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open(mode='rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0035088062286376953, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 32, 40, 33, 35, 37, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode('ASCII')\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 34, 37, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"**/*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': len(file_content), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0026390552520751953, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 34, 40, 37, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*.txt\"):\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': len(file_content), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 34, 39, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 33, 39, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002385854721069336, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 39, 34, 33, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file() and file_path.suffix in ['.txt', '.TXT', '.xml', '.XML']:\n            normalized_file_name = unicodedata.normalize(\n            with file_path.open(mode='rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode(\"ASCII\")\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023491382598876953, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 32, 34, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file() and not file_path.name.startswith('.'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023000240325927734, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 33, 37, 40, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002063274383544922, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 32, 36, 34, 38, 35, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 34, 39, 32, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002101898193359375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0025331974029541016, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 35, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file() and file_path.suffix in ['.txt', '.TXT', '.xml', '.XML']:\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002429962158203125, "tests_passed": true, "error": null}}
{"selected_lines": [39, 33, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 37, 36, 39, 33, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file_obj:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path),\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = os.path.basename(file_path).translate(None, os.sep + os.altsep).replace(os.sep + os.altsep, os.altsep)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 35, 39, 40, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*.txt\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.0001087188720703125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [39, 34, 37, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open() as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 36, 35, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii',\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 32, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 39, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii','ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': len(file_content), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 32, 37, 34, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 32, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*.*'):  # get all the files in the directory\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002682924270629883, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.stem).encode('ASCII', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 34, 32, 33, 35, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('**/*'):\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = file_path.name.encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('**/*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002780914306640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010590553283691406, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32, 38, 36, 40, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 37, 39, 33, 35, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': len(file_content), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 34, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.stem).encode('ASCII', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 37, 33, 36, 34, 40, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002271890640258789, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 32, 38, 37, 39, 33, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 33, 39, 34, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"**/*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode(\"ASCII\")\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023491382598876953, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023038387298583984, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 38, 33, 34, 32, 37, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*.*'):  # get all the files in the directory\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': len(file_content), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002238035202026367, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002179861068725586, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 39, 32, 40, 35, 34, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).glob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023622512817382812, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 37, 33, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 37, 35, 33, 39, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, \"rb\") as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002112150192260742, "tests_passed": true, "error": null}}
{"selected_lines": [39, 33, 40, 35, 38, 37, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii','ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 36, 32, 37, 38, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file_obj:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 36, 34, 39, 38, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('**/*'):\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 33, 34, 40, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('**/*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0025522708892822266, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 32, 34, 40, 33, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if file_path.is_file() and file_path.suffix in ['.txt', '.TXT', '.xml', '.XML']:\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode('ASCII')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open(mode='rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0026979446411132812, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 37, 35, 32, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode('ASCII')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002165079116821289, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 38, 39, 36, 33, 37, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': len(file_content), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022001266479492188, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022978782653808594, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 36, 34, 32, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 39, 38, 36, 37, 35, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii',\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35, 38, 36, 32, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode(\"ASCII\")\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 37, 40, 36, 38, 35, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file() and not file_path.name.startswith('.'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": false, "time": 0.0001590251922607422, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 37, 33, 34, 39, 32, 40, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path),\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 38, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 40, 39, 38, 37, 35, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*.txt\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode(\"ASCII\")\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 33, 37, 40, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002063274383544922, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 35, 37, 32, 39, 38, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 38, 35, 33, 34, 37, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32, 40, 36, 34, 35, 33, 39, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode('ASCII')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0021660327911376953, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 37, 39, 33, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file_obj:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 38, 37, 32, 34, 33, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"**/*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023040771484375, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002112150192260742, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002027750015258789, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 33, 39, 32, 37, 34, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('**/*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open(mode='rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010590553283691406, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [39, 37, 32, 35, 34, 36, 40, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode(\"ASCII\")\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path),\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 39, 37, 32, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': len(file_content), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0021278858184814453, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 37, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file() and file_path.suffix in ['.txt', '.TXT', '.xml', '.XML']:\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0020847320556640625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 34, 39, 32, 36, 33, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with file_path.open(\"rb\") as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 39, 37, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 35, 32, 34, 39, 33, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode()\n            with open(file_path, 'r') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010340213775634766, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open('rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010349750518798828, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33, 35, 39, 34, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*.txt\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.stem).encode('ASCII', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open(\"rb\") as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002443075180053711, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": false, "time": 0.0001590251922607422, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_filename(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': len(file_content), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 34, 33, 40, 38, 36, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024161338806152344, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 39, 40, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002238035202026367, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0009522438049316406, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [40, 32, 33, 36, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open(mode='rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0036249160766601562, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 35, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0021271705627441406, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34, 39, 32, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002101898193359375, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 33, 34, 37, 38, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_filename(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0009620189666748047, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 34, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0019719600677490234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022978782653808594, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 33, 35, 32, 39, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with file_path.open('rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": false, "time": 0.00016117095947265625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 35, 38, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.stem.encode(\"ASCII\", \"ignore\").decode(\"utf8\")\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010590553283691406, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [40, 32, 39, 37, 33, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': len(file_content), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0020949840545654297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 36, 40, 32, 38, 33, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with file_path.open('rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': len(file_content), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022001266479492188, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open('rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0029549598693847656, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002238035202026367, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0020689964294433594, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 33, 32, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 39, 32, 35, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii','ignore').decode()\n            with file_path.open('rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0021009445190429688, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open('rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010349750518798828, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0025331974029541016, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 39, 38, 32, 36, 40, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002275705337524414, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 35, 32, 36, 38, 33, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 36, 33, 39, 37, 38, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": false, "time": 0.0001590251922607422, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.0001087188720703125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 36, 38, 37, 32, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.0001087188720703125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [35, 39, 33, 32, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 32, 36, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file() and not file_path.name.startswith('.'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 39, 34, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file() and not file_path.name.startswith('.'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 39, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 35, 38, 40, 39, 37, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii','ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002203226089477539, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 39, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0025658607482910156, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'r') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': len(file_content), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 34, 35, 36, 38, 37, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with file_path.open() as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 40, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_filename(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.stem.encode(\"ASCII\", \"ignore\").decode(\"utf8\")\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.001087188720703125, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [32, 36, 39, 34, 33, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 33, 36, 37, 39, 32, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 40, 37, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open(\"rb\") as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0020940303802490234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.00011277198791503906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 32, 34, 35, 36, 40, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.stem).encode('ASCII', 'ignore').decode()\n            with file_path.open('rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 40, 35, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii',\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 33, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002174854278564453, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 36, 33, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 37, 35, 36, 38, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, \"rb\") as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0009522438049316406, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [33, 32, 36, 37, 39, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob(\"*.txt\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 35, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 35, 37, 38, 34, 32, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0020580291748046875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 37, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022079944610595703, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 33, 38, 36, 32, 34, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = file_path.stem.encode(\"ASCII\", \"ignore\").decode(\"utf8\")\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.0001087188720703125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022978782653808594, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 35, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0021271705627441406, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022978782653808594, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 37, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 36, 35, 39, 40, 34, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 37, 39, 32, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open(\"rb\") as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0020732879638671875, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 33, 32, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*.txt\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii',\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 34, 39, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_filename(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*.txt\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0009469985961914062, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 38, 33, 34, 39, 40, 32, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode('ASCII')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0019800662994384766, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002027750015258789, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023348331451416016, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 39, 37, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': len(file_content), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0026009082794189453, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 36, 39, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 35, 32, 36, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*.*'):  # get all the files in the directory\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode('ASCII')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022258758544921875, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011751651763916016, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010340213775634766, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [40, 32, 38, 37, 36, 34, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 34, 39, 32, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002101898193359375, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": false, "time": 0.00016117095947265625, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36, 35, 39, 32, 37, 40, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode()\n            with file_path.open(mode='rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022978782653808594, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 38], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002416849136352539, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 36, 35, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii','ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path),\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 32, 35, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 38, 37, 34, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open('rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 37, 34, 32, 39, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002259969711303711, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 32, 34, 40, 36, 35, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 39, 38, 32, 37, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*.*'):  # get all the files in the directory\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002104043960571289, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 37, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.stem.encode(\"ASCII\", \"ignore\").decode(\"utf8\")\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open('rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002360105514526367, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 36, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0009522438049316406, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [34, 36, 39, 37, 33, 38, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, \"rb\") as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 38, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0020949840545654297, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34, 35, 38, 32, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode(\"ASCII\")\n            with file_path.open('rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002640247344970703, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002238035202026367, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii','ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002203226089477539, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 32, 33, 35, 38, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).glob('*'):\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022978782653808594, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 37, 38, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file_obj:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.001051187515258789, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 39, 34, 35, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = _normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0009469985961914062, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 38, 36, 40, 35, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode(\"ASCII\")\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 38, 37, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 36, 39, 33, 34, 35, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with file_path.open('rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 34, 37, 35, 40, 38, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size,\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 35, 34, 38, 40, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode('ASCII')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [38, 40, 35, 39, 37], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ASCII', 'ignore').decode('ASCII')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.0001087188720703125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32, 37, 35, 39, 34, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002185821533203125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 40, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in os.listdir(directory):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0009522438049316406, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [38, 33, 37, 32, 35, 39, 40, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"**/*\"):\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.stem).encode('ASCII', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011751651763916016, "tests_passed": false, "error": "KeyError"}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 40, 32, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file() and file_path.suffix in ['.txt', '.TXT', '.xml', '.XML']:\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022301673889160156, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34, 35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"*\"):\n        if file_path.is_file() and not file_path.name.startswith('.'):\n            normalized_file_name = file_path.stem.encode(\"ASCII\", \"ignore\").decode(\"utf8\")\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 35, 34, 33, 38, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 39, 32, 33, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_filename(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = normalize_file_name(file_path.name)\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0010340213775634766, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).glob(\"**/*\"):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023040771484375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 37, 39, 40, 32, 33, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file() and file_path.suffix in ['.txt', '.TXT', '.xml', '.XML']:\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii','ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0026412010192871094, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 38, 37, 33, 34, 35, 32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('ascii')\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0020689964294433594, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0023348331451416016, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('**/*'):\n        if file_path.name.endswith('.txt'):\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.00267791748046875, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 40, 35, 37, 39, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize(\"NFKD\", file_path.name).encode(\"ASCII\", \"ignore\").decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002413034439086914, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 39, 36, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob('*'):\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 36, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).rglob(\"*.txt\"):\n        if file_path.is_file():\n            normalized_file_name = os.path.basename(file_path).translate(None, os.sep + os.altsep).replace(os.sep + os.altsep, os.altsep)\n            with open(file_path, 'r') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.stat(file_path).st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 33, 32, 37, 40, 34, 39], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file_obj:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': file_path.stat().st_size, 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = file_path.name.replace(\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": false, "time": 0.00011277198791503906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [40, 32, 35, 39, 33, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii','ignore').decode()\n            with open(file_path, 'rb') as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 35, 39, 34, 40], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode('utf-8')\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.002185821533203125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 39, 33], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, \"rb\") as f:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0024640560150146484, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = {}\n    for file_path in pathlib.Path(directory).iterdir():\n        if file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.name).encode('ascii', 'ignore').decode()\n            with open(file_path, 'rb') as file_obj:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.001051187515258789, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 32, 33, 35, 38, 34, 36], "result": {"code": "import os\nimport pathlib\nfrom hashlib import md5\nimport unicodedata\n\ndef task_func(directory):\n    \"\"\"\n    Processes all files within the specified directory, normalizes their filenames to ASCII,\n    calculates their MD5 hashes, and retrieves their sizes. It returns a dictionary where\n    each key is the normalized file name and each value is another dictionary with the file's size\n    and MD5 hash. This method is useful for file integrity checks and file organization tasks.\n\n    Parameters:\n    directory (str): The directory path whose files are to be analyzed.\n\n    Returns:\n    dict: A dictionary where each key is a normalized file name, and the value is a dictionary\n          containing the 'Size' (in bytes) and 'MD5 Hash' of the file.\n\n    Requirements:\n    - os\n    - pathlib\n    - hashlib.md5\n    - unicodedata\n\n    Examples:\n    >>> info = task_func('test')\n    >>> type(info) == dict\n    True\n    >>> 'test.txt' in info\n    True\n    \"\"\"\n    files_info = dict()\n    for file_path in pathlib.Path(directory).rglob(\"*.txt\"):\n        if not file_path.is_file():\n            normalized_file_name = unicodedata.normalize('NFKD', file_path.stem).encode('ASCII', 'ignore').decode()\n            with open(file_path, 'rb') as file_obj:\n                file_content = file.read()\n                file_hash = md5(file_content).hexdigest()\n            files_info[normalized_file_name] = {'Size': os.path.getsize(file_path), 'MD5 Hash': file_hash}\n    return files_info", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
