{"selected_lines": [38, 33, 29, 40, 32, 36, 28, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise Exception('ERROR: Empty list.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 33, 38, 34, 40, 36, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if (len(x_data) != len(y_data)) or (len(y_data) != len(labels)):\n        raise ValueError(\"x, y, and labels cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 28, 36, 40, 29, 34, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception('x and/or y or label lists are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=[1, 1, 0])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(len(x), sharex=True, figsize=(12, len(x) / 2))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 33, 36, 40, 39, 38, 32, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception('x and/or y or label lists are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 32, 40, 39, 34, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 28, 34, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x)+c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05625295639038086, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 32, 39, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError('Input arrays are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axes = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (s)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 29, 28, 34, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception('Invalid input data!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(labels))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 33, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Invalid input, either x or y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.052935123443603516, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 40, 36, 34, 38, 29, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y should not be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 28, 34, 32, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Invalid input. x and y must be non-empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.053295135498046875, "tests_passed": true, "error": null}}
{"selected_lines": [28, 33, 34, 29, 38, 39, 36, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise Exception('Invalid input data!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 29, 33, 28, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x and y should not be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc=\"best\")\n    return fig", "compilation_passed": true, "time": 0.19501709938049316, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 38, 33, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 32, 34, 28, 36, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(x):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1022031307220459, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 32, 28, 34, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=2, label=labels[i])\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 40, 36, 32, 39, 34, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Both x and y lists must be non-empty and have the same length.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.19890999794006348, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 40, 36, 28, 34, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise ValueError(\"x or y or labels cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], absolute_sigma=True, p0=(1, 0.1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 39, 36, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=len(x), ncols=1, sharex=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 28, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(x, list) and isinstance(y, list) and isinstance(labels, list) and len(x) == len(y) and len(x) == len(labels):\n        raise ValueError(\"Empty data.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20444583892822266, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 34, 32, 36, 28, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=[1, 1, 0])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker=\"o\", color=\"green\", label=labels[i])\n    ax.legend(loc='best')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.21738004684448242, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 39, 40, 29, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Please enter x and y data correctly\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], sigma=None)\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 36, 39, 29, 32, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise Exception(\"Empty data given!\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], absolute_sigma=True, p0=(1, 0.1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x_data, y_data, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 40, 34, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x_data, y_data, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 38, 40, 28, 29, 34, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if (len(x_data) != len(y_data)) or (len(y_data) != len(labels)):\n        raise ValueError(\"Data cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i],\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 33, 36, 34, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(len(x), sharex=True, figsize=(12, len(x) / 2))\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20444583892822266, "tests_passed": true, "error": null}}
{"selected_lines": [40, 28, 38, 32, 36, 29, 39, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend(loc=\"best\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 40, 29, 33, 36, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception(\"Empty data given!\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axes = plt.subplots(len(x), sharex=True, figsize=(12, len(x) / 2))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 36, 29, 33, 34, 28, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception(\"Empty data given!\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], method='trf', bounds=([-np.inf, -np.inf, -np.inf], [np.inf, np.inf, np.inf]))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 32, 38, 40, 33, 28, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set(xlabel='Time (s)', ylabel='Temperature (\u00b0C)', title='Exponential fitting')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.1948070526123047, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [38, 29, 40, 39, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y must be non-empty arrays\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.2001209259033203, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 36, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i],\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 33, 28, 38, 29, 32, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), sharex=True, figsize=(15, 10),\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": false, "time": 0.00023508071899414062, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [39, 29, 38, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Data cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker=\"o\", color=\"green\", label=labels[i])\n    ax.set_xlabel('Time (s)')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 34, 29, 39, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Invalid input. x and y must be non-empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axs = plt.subplots(len(labels))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend(loc=\"best\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 39, 36, 34, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Data must be provided!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i, x_values in enumerate(x):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 28, 40, 33, 38, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not all(isinstance(data, np.ndarray) for data in x) and not all(isinstance(data, np.ndarray) for data in y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(labels))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker='o', markersize=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05303692817687988, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 28, 38, 32, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], absolute_sigma=True, p0=(1, 0.1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05374407768249512, "tests_passed": true, "error": null}}
{"selected_lines": [34, 28, 38, 32, 36, 39, 29, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 39, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=2, label=labels[i])\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 38, 36, 28, 33, 29, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(y) != len(labels):\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(labels))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=0.5)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 39, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(y) != len(labels):\n        raise Exception('Invalid data')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.16029000282287598, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 38, 34, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x or y or labels cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], 'o')\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 40, 36, 39, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(labels))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 39, 28, 40, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if (len(x_data) != len(y_data)) or (len(y_data) != len(labels)):\n        raise ValueError(\"Data points for fitting cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 34, 36, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(y) != len(labels):\n        raise ValueError(\"Invalid input, either x or y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=[1, 1, 0])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 28, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=(1, 1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker=\"o\", color=\"green\", label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 29, 28, 38, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) == len(y):\n        raise Exception('ERROR: Empty list.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker='o', markersize=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 29, 39, 33, 28, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, list) is False:\n        raise ValueError(\"Both x and y must be non-empty arrays.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8,4), dpi=100, gridspec_kw={\"wspace\": 0, \"hspace\": 0, \"left\": 0, \"right\": 0})\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, list) is False:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(len(x), sharex=True, figsize=(12, len(x) / 2))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 29, 34, 28, 33, 39, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(x, np.ndarray):\n        raise ValueError(\"Invalid input data\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker=\"o\", color=\"green\", label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 40, 29, 34, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y should not be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 38, 33, 39, 36, 28, 40, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError('Input arrays are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], 'o')\n    ax.set_xlabel(\"Time (s)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 28, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ' ' + str(popt))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05695819854736328, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 34, 38, 28, 39, 40, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Both x and y lists must be non-empty and have the same length.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(ncols=3)\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '-', label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 36, 39, 38, 32, 29, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('Invalid data')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1, figsize=(8, 10))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34, 29, 39, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0)\n    ax.set_xlabel(\"Time (s)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 28, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0527040958404541, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 39, 33, 32, 28, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"No data to plot.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(ncols=3, nrows=1)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 29, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('Inputs cannot be empty.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05232501029968262, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.011028051376342773, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 36, 32, 29, 40, 28, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(y) != len(labels):\n        raise ValueError(\"Data cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ', a={}, b={}'.format(popt[0], popt[1]))\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.21738004684448242, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if (len(x_data) != len(y_data)) or (len(y_data) != len(labels)):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 32, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Both x and y lists must be non-empty and have the same length.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i],\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 34, 28, 39, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x[0]) != len(y[0]):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set(xlabel='Time (s)', ylabel='Temperature (\u00b0C)', title='Exponential fitting')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Invalid input, either x or y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.22040104866027832, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.14506006240844727, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33, 32, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.053420066833496094, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 29, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('Input arrays are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc='best')\n    return fig", "compilation_passed": true, "time": 0.0525050163269043, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 29, 36, 28, 33, 40, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, list) is False:\n        raise ValueError('Input arrays are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.09734606742858887, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.1948070526123047, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [34, 29, 40, 33, 38, 28, 36, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"x or y or labels must not be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(len(x), sharex=True, figsize=(15, 10),\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], sigma=None)\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 40, 29, 34, 38, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(labels))\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 39, 28, 29, 36, 32, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x[0]) != len(y[0]):\n        raise ValueError(\"Invalid input. x and y must be non-empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(len(labels))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 40, 29, 39, 38, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x and y should not be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 28, 33, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) == len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 38, 29, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, list) is False:\n        raise Exception('Invalid data')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 33, 28, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(len(labels))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 29, 39, 40, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), figsize=(16, 16))\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 40, 28, 38, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x[0]) != len(y[0]):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 38, 32, 34, 33, 39, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Inputs cannot be empty.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1)\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], sigma=None)\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20444583892822266, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 38, 39, 29, 36, 28, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 5))\n    for i, data in enumerate(zip(x_data, y_data, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 38, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '-', label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0782318115234375, "tests_passed": true, "error": null}}
{"selected_lines": [29, 40, 34, 36, 32, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Invalid input data\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc=\"best\")\n    return fig", "compilation_passed": true, "time": 0.17458009719848633, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"Empty data given!\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 28, 36, 38, 32, 40, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x[0]) != len(y[0]):\n        raise ValueError(\"x, y, and labels cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(len(x), sharex=True, figsize=(12, len(x) / 2))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x, y, and labels cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.15952587127685547, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 34, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(ncols=3)\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 34, 32, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axes = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=[1, 1, 0])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set(xlabel='Time (s)', ylabel='Temperature (\u00b0C)', title='Exponential fitting')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 28, 33, 39, 34, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(x):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(0.8, 2, -1.))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.2097489833831787, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 36, 39, 29, 34, 32, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('ERROR: Empty list.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), figsize=(16, 16))\n    for i, (x_vals, y_vals, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], absolute_sigma=True, p0=(1, 0.1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', label=labels[i])\n    ax.legend(loc=\"best\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 38, 33, 40, 36, 32, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not all(isinstance(data, np.ndarray) for data in x) and not all(isinstance(data, np.ndarray) for data in y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.053591012954711914, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Data points for fitting cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20396208763122559, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 29, 39, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x or y or labels cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.19869422912597656, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 28, 29, 40, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x, y, and labels cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i],\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 29, 36, 34, 40, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x or y or labels must not be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker=\"o\", color=\"green\", label=labels[i])\n    ax.legend(loc=\"best\")\n    return fig", "compilation_passed": true, "time": 0.16193795204162598, "tests_passed": true, "error": null}}
{"selected_lines": [29, 40, 33, 28, 34, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception(\"Empty data given!\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 5))\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 28, 34, 38, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.set(xlabel='Time (s)', ylabel='Temperature (\u00b0C)', title='Exponential fitting')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 28, 29, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError('Data must be provided!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.053961992263793945, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 39, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.22603392601013184, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 29, 36, 38, 34, 32, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Data points for fitting cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(1, 0.5, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.07552480697631836, "tests_passed": true, "error": null}}
{"selected_lines": [29, 40, 39, 33, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.17613887786865234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [28, 36, 38, 39, 33, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend(loc='best')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 39, 29, 36, 34, 32, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x or y or labels cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1)\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.010659217834472656, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [39, 32, 29, 40, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Data must be provided!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.15782999992370605, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 39, 32, 29, 40, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Invalid input data\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, (x_vals, y_vals, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.2177600860595703, "tests_passed": true, "error": null}}
{"selected_lines": [40, 32, 34, 33, 36, 29, 39, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise Exception('Invalid data')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(len(x), sharex=True, figsize=(12, len(x) / 2))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.36658668518066406, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [28, 36, 34, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x_data, y_data, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 28, 36, 40, 33, 34, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=len(x), ncols=1, sharex=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 40, 36, 32, 28, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(15, 5))\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 28, 38, 33, 32, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise ValueError(\"x, y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 36, 38, 28, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not all(isinstance(data, np.ndarray) for data in x) and not all(isinstance(data, np.ndarray) for data in y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots(figsize=(15, 10), nrows=3, ncols=2)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 34, 29, 32, 36, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"x or y or labels cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05775713920593262, "tests_passed": true, "error": null}}
{"selected_lines": [28, 36, 29, 38, 40, 39, 32, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if (len(x_data) != len(y_data)) or (len(y_data) != len(labels)):\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x_data, y_data, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 28, 33, 39, 36, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Data points for fitting cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(len(x), sharex=True, figsize=(15, 10),\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 33, 32, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Both x and y must be non-empty arrays.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8,4), dpi=100, gridspec_kw={\"wspace\": 0, \"hspace\": 0, \"left\": 0, \"right\": 0})\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker='o', markersize=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.19069910049438477, "tests_passed": true, "error": null}}
{"selected_lines": [40, 28, 39, 32, 34, 33, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 5))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 28, 38, 29, 36, 34, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axes = plt.subplots(1, len(x))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 32, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=[1, 1, 0])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 36, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i],\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 40, 33, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(ncols=3, nrows=1)\n    for i, (x_vals, y_vals, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 28, 32, 38, 33, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 40, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Please enter x and y data correctly\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1616361141204834, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 36, 40, 34, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(x):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=0.5)\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 39, 38, 33, 36, 34, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Both x and y must be non-empty arrays.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1, figsize=(8, 10))\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('Invalid data')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 36, 29, 38, 32, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(12, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 38, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=(1, 1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ' ' + str(popt))\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 39, 38, 34, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('Invalid input data!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=2, label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 28, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not all(isinstance(data, np.ndarray) for data in x) and not all(isinstance(data, np.ndarray) for data in y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(ncols=3, nrows=1)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 40, 34, 33, 39, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20444583892822266, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 38, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"Empty data given!\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 39, 29, 32, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('x and/or y or label lists are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(figsize=(15, 10), nrows=3, ncols=2)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (s)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1022031307220459, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.053742170333862305, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 28, 38, 34, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise Exception(\"You should provide at least one x, y pair\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 40, 32, 36, 29, 33, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Please enter x and y data correctly\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05416393280029297, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 29, 40, 32, 36, 39, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise ValueError('Data must be provided!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 28, 39, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], 'o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05391979217529297, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 36, 28, 33, 39, 40, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, list) is False:\n        raise ValueError('Data must be provided!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(figsize=(15, 10), nrows=3, ncols=2)\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 38, 36, 28, 34, 40, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axes = plt.subplots(1, len(x))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 38, 39, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 28, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True, sharey=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 34, 38, 40, 33, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError('Input arrays are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 29, 28, 39, 40, 32, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError('Invalid inputs, check parameters')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(figsize=(15, 10), nrows=3, ncols=2)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], sigma=None)\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ' ' + str(popt))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1022031307220459, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 40, 34, 38, 29, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Data cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1022031307220459, "tests_passed": true, "error": null}}
{"selected_lines": [28, 33, 29, 34, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Empty data.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(3, 1, figsize=(4.8, 1.8), sharex=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 38, 34, 39, 28, 29, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(x, np.ndarray):\n        raise ValueError(\"Invalid input data\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8,4), dpi=100, gridspec_kw={\"wspace\": 0, \"hspace\": 0, \"left\": 0, \"right\": 0})\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 28, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.07673525810241699, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 29, 39, 40, 33, 38, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"x and y should not be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34, 33, 40, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(figsize=(15, 10), nrows=3, ncols=2)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 28, 32, 40, 34, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1)\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Data cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, x_values in enumerate(x):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20003080368041992, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 34, 29, 28, 36, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) == len(y):\n        raise ValueError(\"Data cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], 'o')\n    ax.set(xlabel='Time (s)', ylabel='Temperature (\u00b0C)', title='Exponential fitting')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 39, 34, 32, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1, figsize=(8, 10))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(3, 1, figsize=(4.8, 1.8), sharex=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 34, 40, 29, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x or y or labels must not be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 40, 39, 32, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Data cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True, sharey=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 29, 32, 39, 33, 34, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x or y or labels cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1, figsize=(8, 10))\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 29, 40, 36, 34, 28, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise ValueError(\"x or y or labels must not be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(labels))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ', a={}, b={}'.format(popt[0], popt[1]))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel('Time (s)')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"Empty data given!\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 40, 32, 34, 38, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"x, y, and labels cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True)\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 33, 34, 32, 36, 38, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], 'o')\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x and y should not be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.054717063903808594, "tests_passed": true, "error": null}}
{"selected_lines": [29, 38, 28, 40, 32, 33, 39, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"x and y must be non-empty arrays\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker=\"o\", color=\"green\", label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.17282605171203613, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33, 40, 32, 39, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x)+c\n    fig, axs = plt.subplots(1, len(x), figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 39, 32, 29, 40, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise ValueError(\"Both x and y lists must be non-empty and have the same length.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc=\"best\")\n    return fig", "compilation_passed": true, "time": 0.19501709938049316, "tests_passed": true, "error": null}}
{"selected_lines": [32, 40, 39, 33, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"Empty data given!\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axes = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 36, 32, 28, 38, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise Exception('x and/or y or label lists are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(figsize=(15, 10), nrows=3, ncols=2)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 28, 38, 36, 40, 39, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError('Inputs cannot be empty.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=0.5)\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8,4), dpi=100, gridspec_kw={\"wspace\": 0, \"hspace\": 0, \"left\": 0, \"right\": 0})\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.10930585861206055, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [33, 36, 29, 34, 38, 32, 40, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Data must be provided!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axes = plt.subplots(len(x), sharex=True, figsize=(12, len(x) / 2))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], absolute_sigma=True, p0=(1, 0.1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 38, 32, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Invalid input data\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 28, 34, 36, 40, 39, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(x, np.ndarray):\n        raise Exception('Invalid input data!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc='best')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 38, 36, 39, 34, 28, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x, y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.054572105407714844, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 40, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 40, 38, 36, 34, 32, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('Invalid input data!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=[1, 1, 0])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 40, 29, 39, 34, 28, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception(\"Empty data given!\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker=\"o\", color=\"green\", label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 40, 38, 34, 33, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 38, 40, 33, 29, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Data points for fitting cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(x):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.16005682945251465, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.17455387115478516, "tests_passed": true, "error": null}}
{"selected_lines": [28, 33, 40, 34, 32, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 40, 38, 36, 29, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Both x and y lists must be non-empty and have the same length.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20444583892822266, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20444583892822266, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 28, 39, 40, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x_data, y_data, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 34, 38, 40, 39, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise Exception('Invalid input data!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, x_values in enumerate(x):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], 'o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.3202681541442871, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 33, 34, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8,4), dpi=100, gridspec_kw={\"wspace\": 0, \"hspace\": 0, \"left\": 0, \"right\": 0})\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8,4), dpi=100, gridspec_kw={\"wspace\": 0, \"hspace\": 0, \"left\": 0, \"right\": 0})\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.10930585861206055, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [32, 33, 28, 36, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.07075977325439453, "tests_passed": true, "error": null}}
{"selected_lines": [40, 29, 33, 32, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Data cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1, figsize=(8, 10))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 28, 29, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise Exception('x and/or y or label lists are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(x):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y should not be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, (x_vals, y_vals, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.16062498092651367, "tests_passed": true, "error": null}}
{"selected_lines": [28, 38, 33, 29, 34, 32, 40, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '-', label=labels[i])\n    ax.set(xlabel='Time (s)', ylabel='Temperature (\u00b0C)', title='Exponential fitting')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 40, 33, 32, 34, 36, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=len(x), ncols=1, sharex=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 29, 33, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Invalid input, either x or y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), sharex=True, figsize=(15, 10),\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 29, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.22359681129455566, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 33, 39, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x))\n    for i, data in enumerate(zip(x_data, y_data, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 39, 36, 40, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1, figsize=(8, 10))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 39, 38, 40, 32, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x[0]) != len(y[0]):\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '-', label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 29, 39, 34, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError('Input arrays are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 38, 36, 29, 33, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Both x and y must be non-empty arrays.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i, data in enumerate(zip(x_data, y_data, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 29, 36, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Data must be provided!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(ncols=3, nrows=1)\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], sigma=None)\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 32, 33, 40, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '-', label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 29, 28, 36, 32, 33, 38, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x)+c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=0.5)\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 32, 40, 38, 36, 39, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x and y should not be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8,4), dpi=100, gridspec_kw={\"wspace\": 0, \"hspace\": 0, \"left\": 0, \"right\": 0})\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 28, 29, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not all(isinstance(data, np.ndarray) for data in x) and not all(isinstance(data, np.ndarray) for data in y):\n        raise ValueError(\"Empty data.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05329632759094238, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20444583892822266, "tests_passed": true, "error": null}}
{"selected_lines": [39, 28, 29, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Data points for fitting cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.12472295761108398, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33, 29, 28, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not all(isinstance(data, np.ndarray) for data in x) and not all(isinstance(data, np.ndarray) for data in y):\n        raise ValueError(\"Inputs x and y must have at least one entry.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8,4), dpi=100, gridspec_kw={\"wspace\": 0, \"hspace\": 0, \"left\": 0, \"right\": 0})\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x or y or labels cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.2345747947692871, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 39, 28, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Data cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.053633928298950195, "tests_passed": true, "error": null}}
{"selected_lines": [36, 28, 34, 38, 39, 29, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Data points for fitting cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 38, 39, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=(1, 1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 29, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"x, y, and labels cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc=\"best\")\n    return fig", "compilation_passed": true, "time": 0.053639888763427734, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1022031307220459, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 40, 34, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.16341090202331543, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [28, 29, 36, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception('ERROR: Empty list.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 28, 34, 39, 36, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(len(x), sharex=True, figsize=(15, 10),\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x or y or labels must not be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc=\"best\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 29, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x, y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(1, 0.5, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.16041898727416992, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 32, 40, 39, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('Invalid data')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=0.5)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 38, 39, 33, 32, 40, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if (len(x_data) != len(y_data)) or (len(y_data) != len(labels)):\n        raise ValueError(\"Invalid input data\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axes = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], 'o')\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 39, 28, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 33, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x)+c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.21738004684448242, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 38, 33, 29, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Invalid inputs, check parameters')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=2, label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 33, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.36658668518066406, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [39, 29, 36, 32, 34, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y must be non-empty arrays\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 34, 40, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1, figsize=(8, 10))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 28, 36, 32, 33, 39, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], method='trf', bounds=([-np.inf, -np.inf, -np.inf], [np.inf, np.inf, np.inf]))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 28, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception('ERROR: Empty list.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x_data, y_data, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 36, 40, 32, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axs = plt.subplots(ncols=3, nrows=1)\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], sigma=None)\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 34, 32, 28, 38, 40, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Both x and y must be non-empty arrays.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(x):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0552060604095459, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 28, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05325508117675781, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Inputs x and y must have at least one entry.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(ncols=3, nrows=1)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc=\"best\")\n    return fig", "compilation_passed": true, "time": 0.19501709938049316, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.011924266815185547, "tests_passed": false, "error": "Exception"}}
{"selected_lines": [34, 36, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (s)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 40, 38, 39, 29, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception('Invalid input data!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(0.8, 2, -1.))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.09328985214233398, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 34, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(15, 5))\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i],\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], 'o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 33, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 32, 28, 33, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 32, 38, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not all(isinstance(data, np.ndarray) for data in x) and not all(isinstance(data, np.ndarray) for data in y):\n        raise Exception('ERROR: Empty list.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 32, 38, 29, 33, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(labels))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 38, 33, 29, 28, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc=\"best\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 36, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Invalid input, either x or y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 28, 39, 33, 36, 38, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"No data to plot.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 33, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=[1, 1, 0])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 40, 39, 32, 34, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, list) is False:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=len(x), ncols=1, sharex=True)\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=(1, 1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc=\"best\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 32, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True, sharey=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 28, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) == len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 28, 40, 34, 36, 29, 32, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError('Inputs cannot be empty.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 40, 34, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise ValueError('Input arrays are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, x_values in enumerate(x):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 38, 28, 36, 39, 33, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(y) != len(labels):\n        raise ValueError(\"Invalid input. x and y must be non-empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], absolute_sigma=True, p0=(1, 0.1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.054284095764160156, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 38, 36, 29, 39, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('Invalid data')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(15, 5))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 29, 38, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.17772698402404785, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 38, 32, 33, 28, 34, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, list) is False:\n        raise ValueError(\"Please enter x and y data correctly\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8,4), dpi=100, gridspec_kw={\"wspace\": 0, \"hspace\": 0, \"left\": 0, \"right\": 0})\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(0.8, 2, -1.))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], 'o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 28, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ', a={}, b={}'.format(popt[0], popt[1]))\n    ax.set(xlabel='X', ylabel='Y', title=\"Exponential Fit\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 38, 39, 29, 34, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError('Input arrays are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x)+c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 40, 28, 33, 32, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError('Invalid inputs, check parameters')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.36658668518066406, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [38, 40, 32, 36, 39, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1, figsize=(8, 10))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=[1, 1, 0])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '-', label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.22603392601013184, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 28, 36, 38, 32, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], method='trf', bounds=([-np.inf, -np.inf, -np.inf], [np.inf, np.inf, np.inf]))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 34, 32, 38, 28, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], method='trf', bounds=([-np.inf, -np.inf, -np.inf], [np.inf, np.inf, np.inf]))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ' ' + str(popt))\n    ax.legend(loc='best')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 28, 38, 32, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axes = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Please enter x and y data correctly\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '-', label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1834249496459961, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 29, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Please enter x and y data correctly\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1615431308746338, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 36, 40, 34, 38, 32, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"No data to plot.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1, figsize=(8, 10))\n    for i, (x_vals, y_vals, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 40, 38, 28, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Data points for fitting cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), figsize=(16, 16))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ', a={}, b={}'.format(popt[0], popt[1]))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 29, 32, 36, 39, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.2003929615020752, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 28, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x, y, and labels cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker='o', markersize=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.053894996643066406, "tests_passed": true, "error": null}}
{"selected_lines": [39, 28, 34, 36, 29, 33, 32, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x[0]) != len(y[0]):\n        raise Exception('x and/or y or label lists are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x)+c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05303692817687988, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 34, 28, 33, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"x, y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=[1, 1, 0])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 29, 34, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x[0]) != len(y[0]):\n        raise ValueError(\"Both x and y must be non-empty arrays.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 36, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i],\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 39, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Input arrays are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker=\"o\", color=\"green\", label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.16119098663330078, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), sharex=True, figsize=(15, 10),\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 28, 36, 33, 34, 29, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Data points for fitting cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=(1, 1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 33, 28, 39, 38, 40, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception('ERROR: Empty list.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i],\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05419921875, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True, sharey=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.19312286376953125, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [38, 39, 28, 32, 40, 29, 34, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, list) is False:\n        raise ValueError(\"x and y should not be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(ncols=3, nrows=1)\n    for i, data in enumerate(zip(x_data, y_data, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 36, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.18365001678466797, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.2276160717010498, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 40, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('ERROR: Empty list.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=len(x), ncols=1, sharex=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 36, 29, 39, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 28, 29, 40, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(figsize=(15, 10), nrows=3, ncols=2)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 38, 36, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], 'o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 36, 40, 38, 28, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Invalid input data\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(len(x), sharex=True, figsize=(12, len(x) / 2))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (s)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 39, 36, 34, 40, 33, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(ncols=3)\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(1, 0.5, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (s)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=(1, 1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.12626409530639648, "tests_passed": false, "error": "RuntimeError"}}
{"selected_lines": [38, 28, 32, 40, 39, 29, 34, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(ncols=3, nrows=1)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ', a={}, b={}'.format(popt[0], popt[1]))\n    ax.set_xlabel(\"Time (s)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32, 34, 40, 39, 38, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError('Data must be provided!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker='o', markersize=2, label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 36, 33, 39, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True)\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.22072792053222656, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x)+c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.2003040313720703, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 40, 39, 28, 32, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(x, np.ndarray):\n        raise ValueError(\"x and y must be non-empty arrays\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(ncols=3, nrows=1)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 33, 34, 36, 29, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Please enter x and y data correctly\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=(1, 1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 39, 36, 38, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not all(isinstance(data, np.ndarray) for data in x) and not all(isinstance(data, np.ndarray) for data in y):\n        raise ValueError(\"Data points for fitting cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20137286186218262, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33, 36, 40, 28, 39, 29, 38, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise Exception(\"You should provide at least one x, y pair\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], absolute_sigma=True, p0=(1, 0.1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set(xlabel='X', ylabel='Y', title=\"Exponential Fit\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 39, 32, 40, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), sharex=True, figsize=(15, 10),\n    for i, data in enumerate(zip(x_data, y_data, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 40, 38, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"You should provide at least one x, y pair\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(12, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.18023085594177246, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 34, 32, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 39, 32, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(12, 5))\n    for i, data in enumerate(zip(x_data, y_data, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.1948070526123047, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [40, 29, 32, 36, 28, 33, 39, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception('x and/or y or label lists are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(figsize=(15, 10), nrows=3, ncols=2)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('x and/or y or label lists are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.011984109878540039, "tests_passed": false, "error": "Exception"}}
{"selected_lines": [32, 34, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 28, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i, (x_vals, y_vals, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.10995197296142578, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 29, 32, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise ValueError(\"x, y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=0.5)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05271196365356445, "tests_passed": true, "error": null}}
{"selected_lines": [34, 28, 38, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if (len(x_data) != len(y_data)) or (len(y_data) != len(labels)):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker=\"o\", color=\"green\", label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 39, 34, 28, 36, 38, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], method='trf', bounds=([-np.inf, -np.inf, -np.inf], [np.inf, np.inf, np.inf]))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 36, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Both x and y must be non-empty arrays.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05251598358154297, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 39, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, list) is False:\n        raise ValueError(\"Invalid input, either x or y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 38, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], sigma=None)\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set(xlabel='X', ylabel='Y', title=\"Exponential Fit\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 34, 32, 33, 28, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x, y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 5.6427390575408936, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [32, 33, 29, 34, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Invalid input data\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('Time (s)')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 29, 34, 28, 36, 40, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"x, y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x_data, y_data, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('x and/or y or label lists are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.011984109878540039, "tests_passed": false, "error": "Exception"}}
{"selected_lines": [38, 29, 34, 36, 32, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Invalid inputs, check parameters')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.16859984397888184, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33, 39, 28, 32, 29, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Please enter x and y data correctly\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(ncols=3, nrows=1)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc='best')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ' ' + str(popt))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.18950772285461426, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=(1, 1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc='best')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 39, 38, 28, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Invalid input data\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker=\"o\", color=\"green\", label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 38, 36, 32, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8,4), dpi=100, gridspec_kw={\"wspace\": 0, \"hspace\": 0, \"left\": 0, \"right\": 0})\n    for i, x_values in enumerate(x):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 40, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Inputs x and y must have at least one entry.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.16403722763061523, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.19258594512939453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 32, 34, 33, 38, 40, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(labels))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 38, 39, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(ncols=3)\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 33, 40, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(x, np.ndarray):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), figsize=(16, 16))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(ncols=3, nrows=1)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=(1, 1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 29, 40, 32, 34, 38, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(x, np.ndarray):\n        raise ValueError('Invalid inputs, check parameters')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=len(x), ncols=1, sharex=True)\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 34, 29, 28, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Data cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker='o', markersize=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34, 32, 29, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, list) is False:\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0547788143157959, "tests_passed": true, "error": null}}
{"selected_lines": [28, 39, 34, 38, 36, 29, 33, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(x, list) and isinstance(y, list) and isinstance(labels, list) and len(x) == len(y) and len(x) == len(labels):\n        raise ValueError(\"x or y or labels must not be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(labels))\n    for i, x_values in enumerate(x):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=[1, 1, 0])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set(xlabel='Time (s)', ylabel='Temperature (\u00b0C)', title='Exponential fitting')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 40, 28, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x[0]) != len(y[0]):\n        raise ValueError(\"No data to plot.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 34, 28, 40, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1, figsize=(8, 10))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 29, 32, 36, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception('Invalid input data!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 28, 32, 33, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(figsize=(15, 10), nrows=3, ncols=2)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 28, 38, 39, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], method='trf', bounds=([-np.inf, -np.inf, -np.inf], [np.inf, np.inf, np.inf]))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.09328985214233398, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 36, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(3, 1, figsize=(4.8, 1.8), sharex=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i],\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=0.5)\n    ax.legend(loc=\"best\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 29, 34, 39, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Both x and y lists must be non-empty and have the same length.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 40, 39, 29, 32, 28, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"x, y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20444583892822266, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0934760570526123, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Invalid inputs, check parameters')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], sigma=None)\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8,4), dpi=100, gridspec_kw={\"wspace\": 0, \"hspace\": 0, \"left\": 0, \"right\": 0})\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 40, 32, 39, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception('ERROR: Empty list.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 36, 28, 40, 34, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise ValueError(\"x and y should not be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1)\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('x and/or y or label lists are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1, figsize=(8, 10))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.21738004684448242, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05673789978027344, "tests_passed": true, "error": null}}
{"selected_lines": [32, 40, 28, 36, 39, 34, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x)+c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(0.8, 2, -1.))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05392313003540039, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 28, 32, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], method='trf', bounds=([-np.inf, -np.inf, -np.inf], [np.inf, np.inf, np.inf]))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 32, 29, 40, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Invalid input data\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(figsize=(15, 10), nrows=3, ncols=2)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(0.8, 2, -1.))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(x, np.ndarray):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0715329647064209, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 28, 38, 33, 34, 40, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError('Inputs cannot be empty.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i],\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34, 39, 40, 33, 38, 29, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(3, 1, figsize=(4.8, 1.8), sharex=True)\n    for i, (x_vals, y_vals, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], absolute_sigma=True, p0=(1, 0.1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.set_xlabel(\"Time (s)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 36, 32, 38, 33, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(3, 1, figsize=(4.8, 1.8), sharex=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker='o', markersize=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 36, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=0.5)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.19310903549194336, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.011924266815185547, "tests_passed": false, "error": "Exception"}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(1, 0.5, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.2400808334350586, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 40, 34, 38, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Both x and y must be non-empty arrays.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1, figsize=(8, 10))\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 29, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('Invalid data')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 28, 40, 38, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x or y or labels must not be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], sigma=None)\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20444583892822266, "tests_passed": true, "error": null}}
{"selected_lines": [28, 36, 39, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) == len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (s)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 34, 28, 32, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not all(isinstance(data, np.ndarray) for data in x) and not all(isinstance(data, np.ndarray) for data in y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True, sharey=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Input arrays are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.21649622917175293, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(3, 1, figsize=(4.8, 1.8), sharex=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 39, 34, 38, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.18008923530578613, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 38, 40, 34, 39, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(12, 5))\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 28, 29, 36, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, list) is False:\n        raise ValueError(\"x and y should not be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(3, 1, figsize=(4.8, 1.8), sharex=True)\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 28, 29, 40, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise Exception('x and/or y or label lists are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 34, 33, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(figsize=(15, 10), nrows=3, ncols=2)\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(3, 1, figsize=(4.8, 1.8), sharex=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend(loc='best')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 36, 39, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError('Input arrays are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 32, 28, 38, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.22603392601013184, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 32, 40, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Invalid input. x and y must be non-empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.054485321044921875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 32, 38, 34, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Invalid input, either x or y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20114469528198242, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 38, 33, 39, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x, y, and labels cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), sharex=True, figsize=(15, 10),\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Input arrays are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set(xlabel='X', ylabel='Y', title=\"Exponential Fit\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 33, 28, 36, 34, 29, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"No data to plot.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=(1, 1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(len(x), figsize=(16, 16))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ', a={}, b={}'.format(popt[0], popt[1]))\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 38, 36, 28, 32, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise ValueError(\"No data to plot.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i],\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 28, 38, 29, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) == len(y):\n        raise Exception(\"Empty data given!\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 38, 29, 40, 39, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 36, 34, 33, 32, 39, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Both x and y must be non-empty arrays.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], method='trf', bounds=([-np.inf, -np.inf, -np.inf], [np.inf, np.inf, np.inf]))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 29, 36, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x, y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 40, 34, 39, 32, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 28, 33, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) == len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(12, 5))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 29, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 28, 40, 36, 33, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=(1, 1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 32, 29, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('Invalid input data!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], absolute_sigma=True, p0=(1, 0.1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 28, 29, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x and y must be non-empty arrays\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 29, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1, figsize=(8, 10))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 34, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Invalid input data\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x)+c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.011028051376342773, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [40, 34, 38, 39, 32, 28, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axes = plt.subplots(nrows=len(x), ncols=1, sharex=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0)\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 29, 40, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise Exception('Invalid input data!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 29, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Data cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ', a={}, b={}'.format(popt[0], popt[1]))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.16271686553955078, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 38, 36, 40, 29, 32, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) == len(y):\n        raise ValueError(\"x, y, and labels cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (s)\")\n    return fig", "compilation_passed": true, "time": 0.21140003204345703, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [36, 32, 39, 40, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if (len(x_data) != len(y_data)) or (len(y_data) != len(labels)):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 28, 36, 38, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 28, 33, 29, 32, 36, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, list) is False:\n        raise ValueError(\"Empty data.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), sharex=True, figsize=(15, 10),\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i],\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 28, 40, 32, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(x, list) and isinstance(y, list) and isinstance(labels, list) and len(x) == len(y) and len(x) == len(labels):\n        raise ValueError(\"Invalid input, either x or y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x)+c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 29, 32, 38, 39, 28, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(3, 1, figsize=(4.8, 1.8), sharex=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 36, 33, 34, 28, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise ValueError(\"Data cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axes = plt.subplots(ncols=3)\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], absolute_sigma=True, p0=(1, 0.1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.18206310272216797, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36, 38, 32, 29, 28, 34, 39, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception('x and/or y or label lists are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x_data, y_data, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 34, 29, 36, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 38, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x, y, and labels cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker='o', markersize=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.18467283248901367, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 38, 39, 29, 28, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception(\"Empty data given!\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ' ' + str(popt))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 29, 40, 32, 33, 36, 28, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise ValueError(\"x and y should not be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 39, 40, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (s)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 28, 39, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 28, 33, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(len(x), sharex=True, figsize=(12, len(x) / 2))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 29, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Invalid input, either x or y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0)\n    ax.legend(loc=\"best\")\n    return fig", "compilation_passed": true, "time": 0.16103911399841309, "tests_passed": true, "error": null}}
{"selected_lines": [40, 32, 28, 34, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x[0]) != len(y[0]):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x)+c\n    fig, ax = plt.subplots()\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ', a={}, b={}'.format(popt[0], popt[1]))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05673789978027344, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 39, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 32, 29, 40, 36, 39, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError('Data must be provided!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(15, 5))\n    for i, (x_vals, y_vals, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 38, 36, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=[1, 1, 0])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ', a={}, b={}'.format(popt[0], popt[1]))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 34, 40, 36, 28, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) == len(y):\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1)\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 40, 36, 34, 33, 39, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise Exception('Invalid input data!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set(xlabel='X', ylabel='Y', title=\"Exponential Fit\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 40, 34, 28, 33, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc='best')\n    return fig", "compilation_passed": true, "time": 0.09400510787963867, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 32, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 40, 39, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"Empty data given!\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(figsize=(15, 10), nrows=3, ncols=2)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(1, 0.5, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 38, 28, 29, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) == len(y):\n        raise Exception('Invalid data')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 28, 29, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 39, 36, 34, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(figsize=(15, 10), nrows=3, ncols=2)\n    for i, data in enumerate(x):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 29, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('Invalid data')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set(xlabel='Time (s)', ylabel='Temperature (\u00b0C)', title='Exponential fitting')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 38, 28, 34, 39, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Data cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '-', label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 36, 39, 32, 34, 33, 38, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, list) is False:\n        raise ValueError('Invalid inputs, check parameters')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=len(x), ncols=1, sharex=True)\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 28, 29, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(y) != len(labels):\n        raise ValueError(\"x, y, and labels cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 28, 40, 36, 34, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, list) is False:\n        raise ValueError('Data must be provided!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32, 38, 33, 39, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise Exception(\"You should provide at least one x, y pair\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 28, 39, 40, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x or y or labels must not be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(1, 0.5, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(figsize=(15, 10), nrows=3, ncols=2)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ' ' + str(popt))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(12, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], 'o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 38, 36, 39, 34, 33, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x[0]) != len(y[0]):\n        raise ValueError(\"x, y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], sigma=None)\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker='o', markersize=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x, y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.19494891166687012, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 34, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Data points for fitting cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 38, 40, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Please enter x and y data correctly\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(0.8, 2, -1.))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1616377830505371, "tests_passed": true, "error": null}}
{"selected_lines": [29, 39, 40, 38, 32, 33, 36, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(x, np.ndarray):\n        raise ValueError(\"x, y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x)+c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=2, label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 39, 32, 34, 33, 38, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('Inputs cannot be empty.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=len(x), ncols=1, sharex=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.27678418159484863, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.22072792053222656, "tests_passed": true, "error": null}}
{"selected_lines": [40, 29, 36, 32, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 34, 29, 38, 36, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"x and y must be non-empty arrays\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=(1, 1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 36, 29, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"x, y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0715031623840332, "tests_passed": true, "error": null}}
{"selected_lines": [28, 39, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if (len(x_data) != len(y_data)) or (len(y_data) != len(labels)):\n        raise ValueError(\"Data cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set(xlabel='X', ylabel='Y', title=\"Exponential Fit\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 33, 36, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8,4), dpi=100, gridspec_kw={\"wspace\": 0, \"hspace\": 0, \"left\": 0, \"right\": 0})\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 36, 34, 29, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y must be non-empty arrays\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker='o', markersize=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1615293025970459, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 28, 40, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Invalid input. x and y must be non-empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axes = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 38, 40, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axes = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '-', label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 28, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05559206008911133, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20444583892822266, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 39, 40, 32, 38, 33, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise Exception('Invalid input data!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ', a={}, b={}'.format(popt[0], popt[1]))\n    ax.set_xlabel('Time (s)')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], method='trf', bounds=([-np.inf, -np.inf, -np.inf], [np.inf, np.inf, np.inf]))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 28, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) == len(y):\n        raise Exception(\"Empty data given!\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 29, 28, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x or y or labels must not be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05447220802307129, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 40, 28, 32, 29, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axes = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker='o', markersize=2, label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 29, 34, 28, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Please enter x and y data correctly\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, (x_vals, y_vals, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 29, 32, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(figsize=(15, 10), nrows=3, ncols=2)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 32, 40, 28, 36, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axs = plt.subplots(ncols=3, nrows=1)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '-', label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 28, 34, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(x, np.ndarray):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 29, 34, 33, 38, 32, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"No data to plot.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(ncols=3, nrows=1)\n    for i, (x_vals, y_vals, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(0.8, 2, -1.))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.set_xlabel(\"Time (s)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 40, 29, 39, 33, 36, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"Invalid input, either x or y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], method='trf', bounds=([-np.inf, -np.inf, -np.inf], [np.inf, np.inf, np.inf]))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, list) is False:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 39, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '-', label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 40, 38, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i, x_values in enumerate(x):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=0.5)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.07756304740905762, "tests_passed": true, "error": null}}
{"selected_lines": [38, 29, 34, 36, 40, 39, 32, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"No data to plot.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8,4), dpi=100, gridspec_kw={\"wspace\": 0, \"hspace\": 0, \"left\": 0, \"right\": 0})\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=[1, 1, 0])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 28, 40, 33, 34, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 29, 38, 40, 28, 32, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('Data must be provided!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=[1, 1, 0])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 36, 38, 39, 32, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Input arrays are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(x):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(1, 0.5, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=0.5)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20350003242492676, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 38, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ', a={}, b={}'.format(popt[0], popt[1]))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 32, 39, 29, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"Empty data given!\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc=\"best\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('ERROR: Empty list.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.012399911880493164, "tests_passed": false, "error": "Exception"}}
{"selected_lines": [28, 40, 33, 38, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(len(x), sharex=True, figsize=(12, len(x) / 2))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 29, 39, 36, 33, 34, 28, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Inputs x and y must have at least one entry.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 29, 34, 28, 38, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, list) is False:\n        raise ValueError(\"Data cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set(xlabel='X', ylabel='Y', title=\"Exponential Fit\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 32, 36, 38, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Invalid input. x and y must be non-empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x)+c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.16304397583007812, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 36, 40, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Both x and y must be non-empty arrays.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], 'o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.16635704040527344, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 38, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], sigma=None)\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker=\"o\", color=\"green\", label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20300006866455078, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker=\"o\", color=\"green\", label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 36, 40, 38, 29, 28, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('Input arrays are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(ncols=3)\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i],\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 29, 36, 34, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"x and y must be non-empty arrays\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.07156991958618164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc='best')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 33, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axs = plt.subplots(len(x), figsize=(16, 16))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 38, 28, 39, 29, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x[0]) != len(y[0]):\n        raise ValueError(\"No data to plot.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker='o', markersize=2, label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Both x and y lists must be non-empty and have the same length.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05488181114196777, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20444583892822266, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not all(isinstance(data, np.ndarray) for data in x) and not all(isinstance(data, np.ndarray) for data in y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.07789301872253418, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(x, list) and isinstance(y, list) and isinstance(labels, list) and len(x) == len(y) and len(x) == len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 40, 34, 33, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(labels))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], absolute_sigma=True, p0=(1, 0.1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Inputs x and y must have at least one entry.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20221495628356934, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('Invalid data')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1022031307220459, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 29, 28, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x or y or labels cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x_data, y_data, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 33, 29, 40, 38, 34, 36, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(x, list) and isinstance(y, list) and isinstance(labels, list) and len(x) == len(y) and len(x) == len(labels):\n        raise ValueError('Data must be provided!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 29, 36, 40, 34, 33, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if (len(x_data) != len(y_data)) or (len(y_data) != len(labels)):\n        raise ValueError(\"x or y or labels must not be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True)\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(0.8, 2, -1.))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 29, 39, 33, 36, 28, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"Invalid input data\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(ncols=3, nrows=1)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 28, 32, 34, 36, 38, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if (len(x_data) != len(y_data)) or (len(y_data) != len(labels)):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.23881101608276367, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 29, 32, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError('Input arrays are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.07725334167480469, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 32, 38, 40, 39, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Input arrays are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], method='trf', bounds=([-np.inf, -np.inf, -np.inf], [np.inf, np.inf, np.inf]))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 33, 29, 36, 39, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x or y or labels cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 32, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Inputs cannot be empty.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(x):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.16196012496948242, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 33, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"Empty data given!\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 28, 39, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise Exception('x and/or y or label lists are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set(xlabel='Time (s)', ylabel='Temperature (\u00b0C)', title='Exponential fitting')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker='o', markersize=2, label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 29, 28, 39, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"Please enter x and y data correctly\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x))\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], 'o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 29, 32, 40, 33, 39, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(x, list) and isinstance(y, list) and isinstance(labels, list) and len(x) == len(y) and len(x) == len(labels):\n        raise ValueError('Invalid inputs, check parameters')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(len(x), sharex=True, figsize=(12, len(x) / 2))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel('Time (s)')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 29, 36, 39, 32, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"Empty data given!\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 29, 39, 38, 32, 28, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) == len(y):\n        raise ValueError(\"Data cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y should not be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(ncols=3, nrows=1)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], sigma=None)\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.16274690628051758, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 40, 34, 33, 32, 38, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Data cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), sharex=True, figsize=(15, 10),\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc='best')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.22603392601013184, "tests_passed": true, "error": null}}
{"selected_lines": [29, 40, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x or y or labels must not be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 32, 29, 34, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Invalid inputs, check parameters')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker='o', markersize=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20312714576721191, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.011924266815185547, "tests_passed": false, "error": "Exception"}}
{"selected_lines": [39, 34, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('Invalid input data!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x_data, y_data, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 39, 33, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(labels))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(1, 0.5, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 28, 36, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError('Input arrays are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 40, 28, 29, 38, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 28, 32, 40, 38, 36, 29, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Data points for fitting cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 39, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 28, 36, 40, 39, 32, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"x and y must be non-empty arrays\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i, data in enumerate(x):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20775198936462402, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 39, 40, 34, 38, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Both x and y must be non-empty arrays.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], absolute_sigma=True, p0=(1, 0.1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 28, 39, 29, 34, 32, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise ValueError('Inputs cannot be empty.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], absolute_sigma=True, p0=(1, 0.1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 39, 40, 29, 28, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"No data to plot.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 38, 33, 32, 34, 39, 28, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], method='trf', bounds=([-np.inf, -np.inf, -np.inf], [np.inf, np.inf, np.inf]))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 33, 28, 29, 40, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Inputs x and y must have at least one entry.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(12, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(len(x), sharex=True, figsize=(12, len(x) / 2))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.16897010803222656, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [38, 40, 29, 36, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Input arrays are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1625988483428955, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 38, 32, 34, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Please enter x and y data correctly\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.18403291702270508, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 32, 39, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"Time (s)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1, figsize=(8, 10))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.12284588813781738, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 36, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc=\"best\")\n    return fig", "compilation_passed": true, "time": 0.17928695678710938, "tests_passed": true, "error": null}}
{"selected_lines": [40, 29, 28, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Data points for fitting cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.09449982643127441, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 34, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(ncols=3)\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.18206310272216797, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [40, 34, 32, 29, 38, 39, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Invalid inputs, check parameters')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axes = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 5))\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 29, 38, 33, 32, 28, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"x or y or labels cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axes = plt.subplots(nrows=len(x), ncols=1, sharex=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 28, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(figsize=(15, 10), nrows=3, ncols=2)\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05456709861755371, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.22603392601013184, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 40, 38, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.set(xlabel='X', ylabel='Y', title=\"Exponential Fit\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 38, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Both x and y lists must be non-empty and have the same length.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0544130802154541, "tests_passed": true, "error": null}}
{"selected_lines": [29, 38, 32, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"No data to plot.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.16313982009887695, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 28, 40, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not all(isinstance(data, np.ndarray) for data in x) and not all(isinstance(data, np.ndarray) for data in y):\n        raise Exception('Invalid input data!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x_data, y_data, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker=\"o\", color=\"green\", label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 28, 38, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"x or y or labels must not be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05434584617614746, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 40, 33, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Both x and y must be non-empty arrays.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 40, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Inputs x and y must have at least one entry.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.16403722763061523, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ' ' + str(popt))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1629340648651123, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 36, 32, 28, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise Exception('x and/or y or label lists are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x_data, y_data, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20444583892822266, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 29, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x, y, and labels cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], absolute_sigma=True, p0=(1, 0.1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 39, 36, 32, 38, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('Invalid input data!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(len(x), sharex=True, figsize=(12, len(x) / 2))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 40, 33, 38, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('Invalid input data!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20444583892822266, "tests_passed": true, "error": null}}
{"selected_lines": [29, 39, 34, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y must be non-empty arrays\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(x):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 32, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 32, 39, 40, 28, 38, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception('x and/or y or label lists are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker=\"o\", color=\"green\", label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if (len(x_data) != len(y_data)) or (len(y_data) != len(labels)):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], sigma=None)\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('Time (s)')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 33, 34, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Data must be provided!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.22698116302490234, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 39, 38, 33, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Invalid input data\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker=\"o\", color=\"green\", label=labels[i])\n    ax.set(xlabel='Time (s)', ylabel='Temperature (\u00b0C)', title='Exponential fitting')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 36, 29, 40, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], absolute_sigma=True, p0=(1, 0.1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '-', label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 36, 32, 39, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], absolute_sigma=True, p0=(1, 0.1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 34, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True)\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], sigma=None)\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(len(x), sharex=True, figsize=(12, len(x) / 2))\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 29, 34, 32, 36, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Data cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), sharex=True, figsize=(15, 10),\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 29, 28, 38, 33, 36, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"x, y, and labels cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0)\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 33, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 28, 32, 29, 39, 38, 33, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"x or y or labels must not be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x))\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.17922377586364746, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 36, 29, 40, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Inputs x and y must have at least one entry.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 39, 40, 36, 29, 33, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"x and y should not be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1022031307220459, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.1948070526123047, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1022031307220459, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 36, 32, 34, 38, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True, sharey=True)\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ', a={}, b={}'.format(popt[0], popt[1]))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 29, 34, 36, 28, 32, 39, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) == len(y):\n        raise Exception('ERROR: Empty list.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.21738004684448242, "tests_passed": true, "error": null}}
{"selected_lines": [39, 28, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20444583892822266, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Input arrays are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.21649622917175293, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20444583892822266, "tests_passed": true, "error": null}}
{"selected_lines": [28, 40, 36, 38, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '-', label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.053742170333862305, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0545659065246582, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker=\"o\", color=\"green\", label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1913149356842041, "tests_passed": true, "error": null}}
{"selected_lines": [38, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '-', label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.054049015045166016, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 36, 29, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not all(isinstance(data, np.ndarray) for data in x) and not all(isinstance(data, np.ndarray) for data in y):\n        raise ValueError('Invalid inputs, check parameters')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(1, 0.5, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 40, 38, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.054937124252319336, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('Time (s)')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.09157013893127441, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Invalid input. x and y must be non-empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20314288139343262, "tests_passed": true, "error": null}}
{"selected_lines": [40, 32, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axes = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 38, 28, 29, 39, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Inputs x and y must have at least one entry.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel('Time (s)')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 29, 28, 39, 38, 32, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Invalid input, either x or y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 39, 40, 34, 36, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if (len(x_data) != len(y_data)) or (len(y_data) != len(labels)):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 28, 29, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Invalid input, either x or y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05705595016479492, "tests_passed": true, "error": null}}
{"selected_lines": [40, 29, 39, 38, 32, 28, 36, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise Exception(\"You should provide at least one x, y pair\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 28, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x or y or labels cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05487370491027832, "tests_passed": true, "error": null}}
{"selected_lines": [38, 28, 32, 34, 39, 36, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"No data to plot.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ' ' + str(popt))\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 28, 39, 38, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x[0]) != len(y[0]):\n        raise ValueError('Input arrays are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 36, 33, 32, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axes = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend(loc=\"best\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y should not be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x)+c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20624709129333496, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 28, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Invalid input, either x or y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(0.8, 2, -1.))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05447125434875488, "tests_passed": true, "error": null}}
{"selected_lines": [28, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 28, 29, 33, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Please enter x and y data correctly\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('Time (s)')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True, sharey=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 36, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.18686628341674805, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(x):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05471372604370117, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 38, 28, 34, 33, 29, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) == len(y):\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(ncols=3, nrows=1)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend(loc='best')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 29, 40, 28, 33, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(y) != len(labels):\n        raise ValueError(\"Please enter x and y data correctly\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axes = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 38, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y must be non-empty arrays\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1628720760345459, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 38, 28, 34, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Data cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True, sharey=True)\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ', a={}, b={}'.format(popt[0], popt[1]))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 36, 29, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Inputs x and y must have at least one entry.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], 'o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.2203981876373291, "tests_passed": true, "error": null}}
{"selected_lines": [33, 28, 36, 39, 34, 32, 38, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), sharex=True, figsize=(15, 10),\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 38, 39, 36, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Inputs x and y must have at least one entry.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ' ' + str(popt))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.16698002815246582, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 29, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1871941089630127, "tests_passed": true, "error": null}}
{"selected_lines": [38, 29, 40, 39, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Data must be provided!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8,4), dpi=100, gridspec_kw={\"wspace\": 0, \"hspace\": 0, \"left\": 0, \"right\": 0})\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 29, 40, 38, 33, 32, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Data cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(ncols=3, nrows=1)\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 29, 33, 40, 32, 39, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise Exception('x and/or y or label lists are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axes = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 5))\n    for i, x_values in enumerate(x):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 40, 38, 36, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=0.5)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.054466962814331055, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 28, 40, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32, 38, 36, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.055097103118896484, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 39, 29, 40, 33, 28, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"No data to plot.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axes = plt.subplots(len(x), sharex=True, figsize=(12, len(x) / 2))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 36, 33, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1, figsize=(8, 10))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 32, 29, 28, 39, 36, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(y) != len(labels):\n        raise ValueError('Invalid inputs, check parameters')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axes = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 28, 36, 34, 38, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 40, 36, 29, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) == len(y):\n        raise Exception('Invalid input data!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 29, 39, 38, 36, 28, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError('Data must be provided!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), figsize=(16, 16))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i],\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=0.5)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20308828353881836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20444583892822266, "tests_passed": true, "error": null}}
{"selected_lines": [28, 33, 40, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) == len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True, sharey=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set(xlabel='X', ylabel='Y', title=\"Exponential Fit\")\n    return fig", "compilation_passed": true, "time": 1.0165181159973145, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [33, 36, 28, 29, 32, 40, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError('Data must be provided!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], method='trf', bounds=([-np.inf, -np.inf, -np.inf], [np.inf, np.inf, np.inf]))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Invalid input data\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x[0]) != len(y[0]):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.016960859298706055, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [40, 38, 32, 36, 33, 39, 28, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(len(x), sharex=True, figsize=(12, len(x) / 2))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.09157013893127441, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 33, 38, 32, 36, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axes = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=0.5)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 34, 38, 33, 28, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(12, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=[1, 1, 0])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 28, 29, 33, 36, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"x, y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), figsize=(16, 16))\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Inputs x and y must have at least one entry.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 32, 33, 39, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Both x and y lists must be non-empty and have the same length.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), figsize=(16, 16))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 32, 38, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(figsize=(15, 10), nrows=3, ncols=2)\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker=\"o\", color=\"green\", label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i],\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": false, "time": 0.0003581047058105469, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 33, 28, 29, 40, 39, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(x, list) and isinstance(y, list) and isinstance(labels, list) and len(x) == len(y) and len(x) == len(labels):\n        raise ValueError(\"No data to plot.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(15, 5))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=0.5)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34, 39, 32, 29, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"Both x and y must be non-empty arrays.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05446982383728027, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 36, 29, 34, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel('Time (s)')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 39, 38, 29, 34, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"You should provide at least one x, y pair\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 39, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 32, 36, 39, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker=\"o\", color=\"green\", label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 40, 38, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.054937124252319336, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33, 32, 38, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x, y, and labels cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axes = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 40, 32, 28, 34, 29, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError('Data must be provided!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], method='trf', bounds=([-np.inf, -np.inf, -np.inf], [np.inf, np.inf, np.inf]))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.set(xlabel='Time (s)', ylabel='Temperature (\u00b0C)', title='Exponential fitting')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 38, 32, 40, 34, 29, 36, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError('Input arrays are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 33, 38, 28, 34, 29, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(x, np.ndarray):\n        raise ValueError(\"Invalid input data\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 32, 36, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x, y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 40, 29, 38, 32, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Data points for fitting cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05474424362182617, "tests_passed": true, "error": null}}
{"selected_lines": [40, 29, 38, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('Invalid input data!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i],\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 28, 32, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 28, 32, 34, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not all(isinstance(data, np.ndarray) for data in x) and not all(isinstance(data, np.ndarray) for data in y):\n        raise ValueError('Invalid inputs, check parameters')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1)\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x, y, and labels cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.15952587127685547, "tests_passed": true, "error": null}}
{"selected_lines": [40, 32, 29, 38, 34, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Inputs x and y must have at least one entry.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1, figsize=(8, 10))\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=0.5)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 34, 33, 38, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), figsize=(16, 16))\n    for i, x_values in enumerate(x):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 38, 33, 28, 32, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise ValueError(\"x, y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 5))\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=0.5)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 29, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x or y or labels must not be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('Time (s)')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 40, 32, 39, 38, 29, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Input arrays are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(3, 1, figsize=(4.8, 1.8), sharex=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=[1, 1, 0])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0)\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 39, 28, 33, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"x or y or labels must not be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(1, 0.5, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker=\"o\", color=\"green\", label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 33, 39, 29, 38, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('Invalid data')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1)\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 32, 28, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"x or y or labels cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.21738004684448242, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 39, 28, 36, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=(1, 1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 36, 34, 32, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=[1, 1, 0])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ' ' + str(popt))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 38, 39, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Invalid input, either x or y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker=\"o\", color=\"green\", label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1640787124633789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20444583892822266, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 33, 28, 29, 39, 34, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True, sharey=True)\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 38, 36, 33, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Inputs x and y must have at least one entry.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), figsize=(16, 16))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker='o', markersize=2, label=labels[i])\n    ax.set(xlabel='Time (s)', ylabel='Temperature (\u00b0C)', title='Exponential fitting')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 36, 34, 29, 32, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x[0]) != len(y[0]):\n        raise ValueError(\"x and y should not be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i, (x_vals, y_vals, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 38, 34, 28, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(len(x), sharex=True, figsize=(12, len(x) / 2))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 32, 33, 34, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True, sharey=True)\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05673789978027344, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 39, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i],\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 33, 34, 38, 32, 29, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=0.5)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.18208837509155273, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 34, 29, 38, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"No data to plot.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.22603392601013184, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 39, 33, 40, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker='o', markersize=2, label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.011028051376342773, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33, 36, 29, 40, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 29, 38, 32, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Data points for fitting cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x)+c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.22667813301086426, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 29, 39, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('ERROR: Empty list.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(3, 1, figsize=(4.8, 1.8), sharex=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.07063722610473633, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 28, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, list) is False:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=len(x), ncols=1, sharex=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(1, 0.5, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 38, 28, 39, 40, 29, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Please enter x and y data correctly\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(ncols=3)\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ' ' + str(popt))\n    ax.set_xlabel(\"Time (s)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 39, 34, 28, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Data points for fitting cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.22469210624694824, "tests_passed": true, "error": null}}
{"selected_lines": [36, 28, 32, 34, 33, 29, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise Exception(\"Empty data given!\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axs = plt.subplots(len(x), sharex=True, figsize=(15, 10),\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.21738004684448242, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 29, 38, 39, 34, 32, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x, y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ' ' + str(popt))\n    ax.set(xlabel='X', ylabel='Y', title=\"Exponential Fit\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 40, 29, 39, 28, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(x, list) and isinstance(y, list) and isinstance(labels, list) and len(x) == len(y) and len(x) == len(labels):\n        raise ValueError(\"Empty data.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ' ' + str(popt))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 32, 28, 34, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 28, 40, 34, 36, 33, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), sharex=True, figsize=(15, 10),\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=0.5)\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1, figsize=(8, 10))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 29, 38, 39, 33, 28, 36, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(12, 5))\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 34, 32, 39, 38, 40, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc='best')\n    return fig", "compilation_passed": true, "time": 0.05485987663269043, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 28, 39, 38, 33, 32, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x[0]) != len(y[0]):\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(len(x), sharex=True, figsize=(12, len(x) / 2))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(1, 0.5, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.legend(loc='best')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Invalid input, either x or y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.22040104866027832, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 33, 38, 32, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Both x and y must be non-empty arrays.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"You should provide at least one x, y pair\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.010764122009277344, "tests_passed": false, "error": "Exception"}}
{"selected_lines": [32, 29, 39, 28, 34, 33, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Both x and y must be non-empty arrays.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1, figsize=(8, 10))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 32, 39, 36, 33, 28, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Invalid input, either x or y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(figsize=(15, 10), nrows=3, ncols=2)\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(1, 0.5, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 40, 32, 38, 33, 36, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"You should provide at least one x, y pair\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 36, 32, 29, 33, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x, y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), figsize=(16, 16))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 39, 34, 38, 29, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc=\"best\")\n    return fig", "compilation_passed": true, "time": 0.05553936958312988, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 36, 29, 33, 28, 34, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise Exception('ERROR: Empty list.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axes = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True)\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 40, 29, 36, 34, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Data points for fitting cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(labels))\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"You should provide at least one x, y pair\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.010764122009277344, "tests_passed": false, "error": "Exception"}}
{"selected_lines": [40, 34, 33, 36, 32, 38, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), figsize=(16, 16))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.set_xlabel(\"Time (s)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 28, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc='best')\n    return fig", "compilation_passed": true, "time": 0.05500483512878418, "tests_passed": true, "error": null}}
{"selected_lines": [39, 33, 40, 32, 34, 28, 36, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i],\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '-', label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 28, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x[0]) != len(y[0]):\n        raise Exception('Invalid data')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 40, 39, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(12, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (s)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 40, 34, 28, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], sigma=None)\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 29, 32, 34, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, x_values in enumerate(x):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(1, 0.5, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1642780303955078, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20444583892822266, "tests_passed": true, "error": null}}
{"selected_lines": [38, 28, 39, 32, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=0.5)\n    ax.set_xlabel('Time (s)')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 40, 32, 33, 39, 38, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError('Invalid inputs, check parameters')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=len(x), ncols=1, sharex=True)\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('Time (s)')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 32, 34, 40, 38, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Data cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ' ' + str(popt))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.205672025680542, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('ERROR: Empty list.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.012399911880493164, "tests_passed": false, "error": "Exception"}}
{"selected_lines": [38, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1866168975830078, "tests_passed": true, "error": null}}
{"selected_lines": [28, 39, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc='best')\n    return fig", "compilation_passed": true, "time": 0.05604290962219238, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 40, 36, 29, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('x and/or y or label lists are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 28, 38, 36, 32, 29, 34, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not all(isinstance(data, np.ndarray) for data in x) and not all(isinstance(data, np.ndarray) for data in y):\n        raise ValueError(\"No data to plot.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=[1, 1, 0])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker='o', markersize=2, label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 28, 40, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(3, 1, figsize=(4.8, 1.8), sharex=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 28, 32, 38, 39, 40, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x or y or labels cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set(xlabel='Time (s)', ylabel='Temperature (\u00b0C)', title='Exponential fitting')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not all(isinstance(data, np.ndarray) for data in x) and not all(isinstance(data, np.ndarray) for data in y):\n        raise ValueError(\"x, y, and labels cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0722661018371582, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 38, 32, 40, 29, 33, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(len(x), sharex=True, figsize=(12, len(x) / 2))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 40, 36, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(0.8, 2, -1.))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.054451942443847656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 28, 36, 29, 32, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise Exception('Invalid data')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], sigma=None)\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker='o', markersize=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.19069910049438477, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 40, 33, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Both x and y lists must be non-empty and have the same length.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=0.5)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1, figsize=(8, 10))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 38, 39, 33, 40, 29, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x, y, and labels cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend(loc='best')\n    return fig", "compilation_passed": true, "time": 0.05508089065551758, "tests_passed": true, "error": null}}
{"selected_lines": [34, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 39, 33, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"Empty data given!\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=len(x), ncols=1, sharex=True)\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc=\"best\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 29, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('Invalid data')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(x):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], absolute_sigma=True, p0=(1, 0.1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 29, 33, 39, 40, 32, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('x and/or y or label lists are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc=\"best\")\n    return fig", "compilation_passed": true, "time": 0.2044532299041748, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 29, 32, 33, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Data cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05604887008666992, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 28, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05325508117675781, "tests_passed": true, "error": null}}
{"selected_lines": [29, 38, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Invalid inputs, check parameters')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.16374897956848145, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True, sharey=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 32, 36, 40, 38, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Both x and y must be non-empty arrays.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 40, 28, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots(figsize=(15, 10), nrows=3, ncols=2)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1, figsize=(8, 10))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 39, 34, 36, 28, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True, sharey=True)\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 29, 40, 36, 33, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Inputs cannot be empty.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 32, 34, 40, 33, 28, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if (len(x_data) != len(y_data)) or (len(y_data) != len(labels)):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True, sharey=True)\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], 'o')\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 40, 39, 29, 34, 33, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Invalid inputs, check parameters')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], sigma=None)\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ' ' + str(popt))\n    ax.set(xlabel='X', ylabel='Y', title=\"Exponential Fit\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34, 33, 36, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], absolute_sigma=True, p0=(1, 0.1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 28, 40, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(x, np.ndarray):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend(loc='best')\n    return fig", "compilation_passed": true, "time": 0.05492997169494629, "tests_passed": true, "error": null}}
{"selected_lines": [32, 40, 29, 33, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x, y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axes = plt.subplots(nrows=len(x), ncols=1, sharex=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 33, 34, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('Invalid data')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 39, 36, 40, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"You should provide at least one x, y pair\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(0.8, 2, -1.))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 36, 38, 29, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('ERROR: Empty list.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8,4), dpi=100, gridspec_kw={\"wspace\": 0, \"hspace\": 0, \"left\": 0, \"right\": 0})\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.set(xlabel='Time (s)', ylabel='Temperature (\u00b0C)', title='Exponential fitting')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 29, 40, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Inputs cannot be empty.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(labels))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(x):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1998300552368164, "tests_passed": true, "error": null}}
{"selected_lines": [39, 29, 34, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) == len(y):\n        raise ValueError(\"x and y must be non-empty arrays\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 33, 28, 34, 40, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise ValueError(\"x or y or labels cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), sharex=True, figsize=(15, 10),\n    for i, data in enumerate(zip(x_data, y_data, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 36, 32, 34, 28, 38, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if (len(x_data) != len(y_data)) or (len(y_data) != len(labels)):\n        raise ValueError('Invalid inputs, check parameters')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=(1, 1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.21738004684448242, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 34, 39, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 34, 40, 38, 28, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], sigma=None)\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.set(xlabel='Time (s)', ylabel='Temperature (\u00b0C)', title='Exponential fitting')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 38, 28, 33, 32, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.055006980895996094, "tests_passed": true, "error": null}}
{"selected_lines": [28, 38, 40, 34, 33, 39, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"x or y or labels cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=len(x), ncols=1, sharex=True)\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 40, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True, sharey=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (s)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 29, 39, 40, 33, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Invalid input data\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), figsize=(16, 16))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ' ' + str(popt))\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 40, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], method='trf', bounds=([-np.inf, -np.inf, -np.inf], [np.inf, np.inf, np.inf]))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set(xlabel='Time (s)', ylabel='Temperature (\u00b0C)', title='Exponential fitting')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 28, 36, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ', a={}, b={}'.format(popt[0], popt[1]))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 29, 33, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(12, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(1, 0.5, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ', a={}, b={}'.format(popt[0], popt[1]))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 40, 28, 34, 33, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x[0]) != len(y[0]):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set(xlabel='Time (s)', ylabel='Temperature (\u00b0C)', title='Exponential fitting')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 39, 34, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Please enter x and y data correctly\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05518221855163574, "tests_passed": true, "error": null}}
{"selected_lines": [34, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 38, 36, 32, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Inputs x and y must have at least one entry.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.07819509506225586, "tests_passed": true, "error": null}}
{"selected_lines": [39, 29, 40, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Data points for fitting cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(labels))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 29, 32, 33, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y should not be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x_data, y_data, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 40, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set(xlabel='X', ylabel='Y', title=\"Exponential Fit\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 28, 39, 38, 33, 40, 32, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"No data to plot.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(ncols=3, nrows=1)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34, 39, 32, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not all(isinstance(data, np.ndarray) for data in x) and not all(isinstance(data, np.ndarray) for data in y):\n        raise ValueError('Inputs cannot be empty.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 40, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker='o', markersize=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.055288076400756836, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 39, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(len(x), sharex=True, figsize=(12, len(x) / 2))\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.011924266815185547, "tests_passed": false, "error": "Exception"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.17455387115478516, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 29, 32, 36, 33, 40, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise Exception('Invalid input data!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i],\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 40, 32, 29, 34, 33, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise Exception('Invalid data')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axes = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc='best')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 39, 36, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0)\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.18023085594177246, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 34, 39, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not all(isinstance(data, np.ndarray) for data in x) and not all(isinstance(data, np.ndarray) for data in y):\n        raise ValueError(\"Data points for fitting cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.22603392601013184, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 33, 40, 36, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.22252988815307617, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Invalid input, either x or y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.22040104866027832, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 33, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 5))\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 40, 36, 28, 33, 38, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not all(isinstance(data, np.ndarray) for data in x) and not all(isinstance(data, np.ndarray) for data in y):\n        raise ValueError(\"x and y should not be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ' ' + str(popt))\n    ax.legend(loc='best')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.22072792053222656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 28, 33, 29, 39, 34, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True, sharey=True)\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, list) is False:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0553898811340332, "tests_passed": true, "error": null}}
{"selected_lines": [39, 33, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('ERROR: Empty list.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(x, np.ndarray):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.09626078605651855, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 33, 36, 40, 32, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('ERROR: Empty list.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 34, 32, 33, 29, 28, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception('Invalid data')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(3, 1, figsize=(4.8, 1.8), sharex=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], 'o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 33, 40, 29, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"No data to plot.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axes = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 40, 28, 32, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05524015426635742, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 29, 33, 38, 39, 40, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Invalid inputs, check parameters')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=0.5)\n    ax.set(xlabel='Time (s)', ylabel='Temperature (\u00b0C)', title='Exponential fitting')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 29, 40, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"Empty data given!\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 40, 32, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Invalid input. x and y must be non-empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.18238592147827148, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 28, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Both x and y must be non-empty arrays.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 28, 34, 39, 40, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, list) is False:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(ncols=3)\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.16341090202331543, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.22603392601013184, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05453205108642578, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.16327309608459473, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 28, 34, 36, 29, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Inputs x and y must have at least one entry.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True)\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], absolute_sigma=True, p0=(1, 0.1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34, 29, 36, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('Invalid inputs, check parameters')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], p0=(1, 0.5, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05477714538574219, "tests_passed": true, "error": null}}
{"selected_lines": [29, 39, 36, 32, 34, 40, 33, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Please enter x and y data correctly\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i],\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set(xlabel='X', ylabel='Y', title=\"Exponential Fit\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 28, 29, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception('x and/or y or label lists are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 40, 38, 36, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Please enter x and y data correctly\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), sharex=True, figsize=(15, 10),\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=[1, 1, 0])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 33, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set(xlabel='Time (s)', ylabel='Temperature (\u00b0C)', title='Exponential fitting')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1574690341949463, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36, 34, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], method='trf', bounds=([-np.inf, -np.inf, -np.inf], [np.inf, np.inf, np.inf]))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 40, 32, 29, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Invalid inputs, check parameters')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(12, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ', a={}, b={}'.format(popt[0], popt[1]))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 29, 28, 36, 32, 39, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise Exception('Invalid input data!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(12, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i],\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 39, 40, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34, 32, 29, 36, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if (len(x_data) != len(y_data)) or (len(y_data) != len(labels)):\n        raise Exception(\"Empty data given!\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(x):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 38, 28, 39, 32, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.09157013893127441, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [38, 32, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axes = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x, y, and labels cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1876087188720703, "tests_passed": true, "error": null}}
{"selected_lines": [39, 29, 33, 36, 32, 40, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y must be non-empty arrays\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i],\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 28, 36, 38, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker='o', markersize=2, label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 28, 33, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '-', label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05633997917175293, "tests_passed": true, "error": null}}
{"selected_lines": [29, 40, 36, 39, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Inputs cannot be empty.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], absolute_sigma=True, p0=(1, 0.1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.22876596450805664, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 29, 34, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"Empty data given!\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 36, 39, 38, 29, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError('Inputs cannot be empty.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i] + ' ' + str(popt))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05537271499633789, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 38, 34, 36, 39, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) == len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(12, 5))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 29, 32, 39, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x or y or labels must not be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(15, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], 'o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 28, 39, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 36, 29, 38, 32, 40, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"x, y, and labels cannot be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], sigma=None)\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend(loc='best')\n    return fig", "compilation_passed": true, "time": 0.05521202087402344, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception(\"Empty data given!\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.010988950729370117, "tests_passed": false, "error": "Exception"}}
{"selected_lines": [34, 28, 33, 36, 40, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if (len(x_data) != len(y_data)) or (len(y_data) != len(labels)):\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 38, 32, 28, 34, 39, 40], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Inputs x and y must have at least one entry.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], method='trf', bounds=([-np.inf, -np.inf, -np.inf], [np.inf, np.inf, np.inf]))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=0.5)\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20444583892822266, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 39, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axes = plt.subplots(ncols=3)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 29, 36, 39, 34, 33, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise Exception(\"Empty data given!\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True, sharey=True)\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y must be non-empty arrays\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.18948984146118164, "tests_passed": true, "error": null}}
{"selected_lines": [38, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '-', label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.055461883544921875, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 36, 38, 40, 39, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0)\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.07576990127563477, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 40, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not all(isinstance(data, np.ndarray) for data in x) and not all(isinstance(data, np.ndarray) for data in y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(x):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.054850101470947266, "tests_passed": true, "error": null}}
{"selected_lines": [38, 28, 40, 32, 29, 39, 34, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x and y should not be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=(1, 1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (seconds)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 32, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError('Data must be provided!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axs = plt.subplots(len(x), figsize=(16, 16))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 34, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y must be non-empty arrays\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc='best')\n    return fig", "compilation_passed": true, "time": 0.16786885261535645, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.011028051376342773, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [38, 36, 39, 34, 33, 32, 29, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception('x and/or y or label lists are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(len(x), figsize=(16, 16))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.07063722610473633, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 29, 38, 32, 36, 40, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception(\"X, Y, and labels must be provided\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True, sharey=True)\n    for i, x_values in enumerate(x):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.17455387115478516, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 28, 33, 29, 32, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(y) != len(labels):\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i],\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.36658668518066406, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [38, 32, 28, 29, 40, 34, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise ValueError('Data must be provided!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 36, 29, 28, 38, 33, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception('x and/or y or label lists are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots(ncols=3)\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 39, 29, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('ERROR: Empty list.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=0.5)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.20654582977294922, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True)\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05529904365539551, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 36, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.18686628341674805, "tests_passed": true, "error": null}}
{"selected_lines": [29, 39, 36, 33, 32, 28, 40, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axes = plt.subplots(1, len(x))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 29, 33, 38, 32, 28, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError('Input data cannot be empty or None.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(ncols=3)\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 36, 38, 34, 28, 39, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise ValueError(\"x and y must be non-empty lists of numpy arrays and labels must be a non-empty list of strings.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 28, 39, 33, 34, 38, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise ValueError(\"x or y or labels must not be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(8, 4), dpi=300)\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], marker='o')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 40, 28, 38, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise Exception('ERROR: Empty list.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, x_values in enumerate(x):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker='o', markersize=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 34, 39, 38, 40, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x_data, y_data, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend(loc=\"best\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel('x')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 28, 38, 36, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x_data, y_data, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], p0=(1, 1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 28, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(labels, str):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker=\"o\", color=\"green\", label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(x):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.22507596015930176, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 34, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not all(isinstance(data, np.ndarray) for data in x) and not all(isinstance(data, np.ndarray) for data in y):\n        raise ValueError(\"Empty data.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, (x_vals, y_vals, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05473685264587402, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 40, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise Exception('Invalid input data!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.22603392601013184, "tests_passed": true, "error": null}}
{"selected_lines": [28, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend(loc=\"best\")\n    return fig", "compilation_passed": true, "time": 0.05433392524719238, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 29, 38, 33, 39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Inputs x and y must have at least one entry.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axes = plt.subplots(1, len(x), figsize=(10, 5), constrained_layout=True)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set(xlabel='X', ylabel='Y', title=\"Exponential Fit\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 40, 38, 28, 34, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 40, 38, 33, 29, 34], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y should not be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i in range(len(labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=0, marker='o', markersize=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.17613887786865234, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(12, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.13123679161071777, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 28, 39, 34, 38], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if isinstance(x, list) and isinstance(y, list) and isinstance(labels, list) and len(x) == len(y) and len(x) == len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x_data)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x and y should not be empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, (x_vals, y_vals, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i], linewidth=2, color=colors[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 38, 29, 36, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x, y or labels is empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (s)\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 29, 33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x or y or labels cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], linewidth=2, label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.19078397750854492, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 34, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise Exception('x and/or y or label lists are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i], absolute_sigma=True, p0=(1, 0.1, 0))\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 38, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, (xs, ys, label) in enumerate(zip(x, y, labels)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05650019645690918, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 40, 32, 29, 34, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise Exception('Invalid input data!')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"Time (s)\")\n    return fig", "compilation_passed": true, "time": 0.21140003204345703, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [39, 28, 32, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x_data) != len(y_data):\n        raise ValueError(\"Both x and y lists must be non-empty and have the same length.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, axs = plt.subplots(nrows=len(x), ncols=1)\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1574690341949463, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.1022031307220459, "tests_passed": true, "error": null}}
{"selected_lines": [39, 29, 32, 33, 40, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"Invalid input. x and y must be non-empty.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.set_xlabel(\"x\")\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 28, 40, 38, 29, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if type(x[0]) == list:\n        raise ValueError('Inputs cannot be empty.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.056166887283325195, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"Data points for fitting cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.2063460350036621, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not x or not y or not labels:\n        raise ValueError(\"x or y or labels cannot be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.16438007354736328, "tests_passed": true, "error": null}}
{"selected_lines": [28, 39, 32, 29], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise Exception('ERROR: Empty list.')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.grid()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Empty data lists provided.\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05419921875, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 40, 32], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if not isinstance(x, (list, tuple)):\n        raise Exception('x and/or y or label lists are empty')\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a*np.exp(-b*x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], exponential_func(x[i], *popt), label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 29, 36, 32, 39, 34, 33, 28], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) != len(labels):\n        raise ValueError(\"x or y or labels must not be empty\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i, data in enumerate(zip(x, y)):\n        # Fit the exponential model to the data\n        popt, _ = curve_fit(exponential_func, x[i], y[i], sigma=None)\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], '--', color='C{}'.format(i))\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.055194854736328125, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 29, 28, 36], "result": {"code": "import numpy as np\nfrom scipy.optimize import curve_fit\n\n\ndef task_func(x, y, labels):\n    \"\"\"\n    Fit an exponential curve to given data points and plot the curves with labels.\n    It fits an exponential curve of the form: f(x) = a * exp(-b * x) + c\n    to the provided x and y data points for each set of data and plots the fitted curves\n    with the corresponding labels on a single matplotlib figure.\n\n    Parameters:\n    - x (list of np.ndarray): List of numpy arrays, each representing the x-values of the data points for a dataset.\n    - y (list of np.ndarray): List of numpy arrays, each representing the y-values of the data points for a dataset.\n    - labels (list of str): List of strings, each representing the label for a dataset.\n\n    Returns:\n    - matplotlib.figure.Figure: The figure object that contains the plotted curves.\n\n    Requirements:\n    - numpy\n    - scipy.optimize\n\n    Example:\n    >>> x_data = [np.array([1,2,3]), np.array([4,5,6]), np.array([7,8,9])]\n    >>> y_data = [np.array([4,5,6]), np.array([7,8,9]), np.array([10,11,12])]\n    >>> labels = ['H2O', 'O2', 'CO2']\n    \"\"\"\n    if len(x) != len(y) or len(x) != len(labels):\n        raise ValueError(\"Please enter x and y data correctly\")\n    def exponential_func(x, a, b, c):\n        \"\"\"Exponential function model for curve fitting.\"\"\"\n        return a * np.exp(-b * x) + c\n    fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit the exponential model to the data\n        popt, pcov = curve_fit(exponential_func, x[i], y[i])\n        # Plot the fitted curve\n        ax.plot(x[i], y[i], label=labels[i])\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.05673098564147949, "tests_passed": true, "error": null}}
